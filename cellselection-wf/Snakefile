"""This workflow aims to reconcile the differences among the cell ranger runs 
and to identify which barcodes are indeed cells."""
import os
import yaml 
from itertools import chain
from pathlib import Path

import pandas as pd

from snakemake.shell import shell

configfile: 'config/config.yaml'
common_config = yaml.load(open('../config/common.yaml', 'rb').read())
ASSEMBLY = common_config['assembly']
TAG = common_config['tag']

SAMPLES = pd.read_csv('../config/scrnaseq-sampletable.tsv', sep='\t', index_col=0).index.tolist()

localrules: unzip_cellranger3

rule targets:
    input: 
        expand(config['data_pattern']['cellranger-wf'].replace('barcodes', 'cell_ids'),
            stage=['raw', 'filtered'],
            assembly=ASSEMBLY,
            tag=TAG,
            sample=SAMPLES
        ),
        expand(config['data_pattern']['cellranger-force-wf'].replace('barcodes', 'cell_ids'),
            stage=['raw', 'filtered'],
            assembly=ASSEMBLY,
            tag=TAG,
            sample=SAMPLES
        ),
        expand(config['data_pattern']['cellranger3-wf'].replace('barcodes', 'cell_ids'),
            stage=['raw', 'filtered'],
            sample=SAMPLES
        ),
        expand('../output/cellselection-wf/dropletutils/{sample}_cell_calls.feather',
            sample=SAMPLES
        ),
        expand('../output/cellselection-wf/{sample}_combined_cell_calls.feather',
            sample=SAMPLES
        ),
        expand('../output/cellselection-wf/{sample}_scrublet_dublets.txt',
            sample=SAMPLES
        ),
        expand('../output/cellselection-wf/{sample}/matrix.mtx',
            sample=SAMPLES
        )


rule unzip_cellranger3:
    input:
        barcodes = config['data_pattern']['cellranger3-wf'] + '.gz',
        features = config['data_pattern']['cellranger3-wf'].replace('matrix.mtx', 'features.tsv') + '.gz',
        matrix = config['data_pattern']['cellranger3-wf'].replace('barcodes.tsv', 'matrix.mtx') + '.gz'
    output:
        barcodes = config['data_pattern']['cellranger3-wf'],
        features = config['data_pattern']['cellranger3-wf'].replace('barcodes.tsv', 'genes.tsv'),
        matrix = config['data_pattern']['cellranger3-wf'].replace('barcodes.tsv', 'matrix.mtx')
    shell:"""
        gunzip -c {input.barcodes} > {output.barcodes} && \
        gunzip -c {input.features} > {output.features} && \
        gunzip -c {input.matrix} > {output.matrix}
    """


rule barcode_to_cellid:
    input: '{prefix}/barcodes.tsv'
    output: '{prefix}/cell_ids.tsv'
    params: 
        sample = lambda wildcards: re.search('testis\d', wildcards.prefix)[0]
    script: 'scripts/barcode_to_cellid.py'


def _dropletutils(wildcards):
    return expand(config['data_pattern'][config['cellranger'][0]],
        sample=wildcards.sample,
        assembly=ASSEMBLY,
        tag=TAG,
        stage='raw'
    )


rule dropletutils:
    input: _dropletutils
    output: 
        pval_plot = '../output/cellselection-wf/dropletutils/{sample}_pval.png',
        barcode_rank = '../output/cellselection-wf/dropletutils/{sample}_bc_rank.png',
        cell_calls = '../output/cellselection-wf/dropletutils/{sample}_cell_calls.feather'
    conda: '../envs/dropletutils.yaml'
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: 'scripts/dropletutils.R'


def _summary(wildcards, stage):
    res = []
    for k, v in config['data_pattern'].items():
        res.extend(expand(v, sample=wildcards.sample, assembly=ASSEMBLY, tag=TAG, stage=stage))
    return res


def _summary_raw(wildcards):
    return _summary(wildcards, 'raw')


def _summary_filtered(wildcards):
    return _summary(wildcards, 'filtered')


rule summary:
    input:
        raw = _summary_raw,
        filtered = _summary_filtered,
        droputils = rules.dropletutils.output.cell_calls
    output: 
        cell_calls = '../output/cellselection-wf/{sample}_combined_cell_calls.feather',
        upset_plot = '../output/cellselection-wf/{sample}_combined_upset.svg'
    params: config['data_pattern'].keys()
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: 'scripts/summary.R'
    

rule scrublet:
    input: 
        cell_ids = lambda wildcards: expand(
            config['data_pattern']['cellranger-wf'].replace('barcodes', 'cell_ids'),
            stage='raw', 
            assembly=ASSEMBLY, 
            tag=TAG, 
            sample=wildcards.sample
        )[0],
        mtx = lambda wildcards: expand(
            config['data_pattern']['cellranger-wf'].replace('barcodes.tsv', 'matrix.mtx'),
            stage='raw', 
            assembly=ASSEMBLY, 
            tag=TAG, 
            sample=wildcards.sample
        )[0],
        cell_calls = lambda wildcards: expand(
            '../output/cellselection-wf/{sample}_combined_cell_calls.feather',
            sample=wildcards.sample
        )[0],
    output: 
        doublets = '../output/cellselection-wf/{sample}_scrublet_dublets.txt',
        histogram = '../output/cellselection-wf/{sample}_scrublet_histogram.png',
        umap = '../output/cellselection-wf/{sample}_scrublet_umap.png',
        tsne = '../output/cellselection-wf/{sample}_scrublet_tsne.png',
    params: 
        threshold = 0.25
    conda: '../envs/scrublet.yaml'
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: 'scripts/scrublet.py'


rule save_filtered_cell_matrix:
    input: 
        scrublet = '../output/cellselection-wf/{sample}_scrublet_dublets.txt',
        cell_calls = '../output/cellselection-wf/{sample}_combined_cell_calls.feather',
        barcodes = lambda wildcards: expand(
            config['data_pattern']['cellranger-wf'],
            stage='raw', 
            assembly=ASSEMBLY, 
            tag=TAG, 
            sample=wildcards.sample
        )[0],
        genes = lambda wildcards: expand(
            config['data_pattern']['cellranger-wf'].replace('barcodes', 'genes'),
            stage='raw', 
            assembly=ASSEMBLY, 
            tag=TAG, 
            sample=wildcards.sample
        )[0],
        mtx = lambda wildcards: expand(
            config['data_pattern']['cellranger-wf'].replace('barcodes.tsv', 'matrix.mtx'),
            stage='raw', 
            assembly=ASSEMBLY, 
            tag=TAG, 
            sample=wildcards.sample
        )[0],
        fbgn_annotation = Path(
            os.getenv('REFERENCES_DIR', '../lcdb-references'), 
            expand('{assembly}/{tag}/fb_annotation/{assembly}_{tag}.fb_annotation', assembly=ASSEMBLY, tag=TAG)[0]
        ).as_posix()
    output:
        cell_ids = '../output/cellselection-wf/{sample}/cell_ids.tsv',
        genes = '../output/cellselection-wf/{sample}/genes.tsv',
        mtx = '../output/cellselection-wf/{sample}/matrix.mtx'
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: 'scripts/filter_cells.py'
    
