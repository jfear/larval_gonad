"""Adult Testis scRNA-Seq Workflow

Data is from:
    Witt, Evan, Sigi Benjamin, Nicolas Svetec, and Li Zhao. 2019. “Testis
    Single-Cell RNA-Seq Reveals the Dynamics of de Novo Gene Transcription and
    Germline Mutational Bias in Drosophila.” eLife 8 (August).
    https://doi.org/10.7554/eLife.47138.

Available at:
SRR9705086: Ral517
SRR9700117: "wild strain"
"""
import yaml
from pathlib import Path

from more_itertools import flatten
import pandas as pd
from snakemake.rules import expand

from larval_gonad.config import read_config

configfile: "../config/common.yaml"

# Build References
sample_table = pd.DataFrame(dict(srr=["SRR9705086", "SRR9700117"], sample=["Ral517", "wild"]))
# sample_table = pd.DataFrame(dict(srr=["SRR9700117"], sample=["wild"]))


ASSEMBLY = config["assembly"]
TAG = config["tag"]

localrules: unzip_cellranger3, barcode_to_cellid, expressed_genes, commonly_expressed_genes

rule all:
    input:
        expand("../output/adult-testis-scRNAseq-wf/raw_{sample}.feather", sample=sample_table["sample"])
    


################################################################################
# Download Data
################################################################################
rule fq_prefetch:
    output: temp("../output/adult-testis-scRNAseq-wf/{sample}.sra")
    log: "../output/adult-testis-scRNAseq-wf/{sample}.sra-download.log"
    params:
        srr=lambda wildcards: sample_table.query(f"sample == '{wildcards.sample}'").srr.values[0]
    conda: "config/sratools.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 2,
        time_hr=lambda wildcards, attempt: attempt * 8
    shell: "prefetch --output-file {output[0]} {params.srr} > {log} 2>&1"

rule fq_dump:
    input: Path(rules.fq_prefetch.output[0]).absolute().as_posix()
    output:
        r1=temp("../output/adult-testis-scRNAseq-wf/fqs/{sample}/{sample}_1.fastq"),
        r2=temp("../output/adult-testis-scRNAseq-wf/fqs/{sample}/{sample}_2.fastq")
    conda: "config/sratools.yaml"
    threads: 8
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 4,
        time_hr=lambda wildcards, attempt: attempt * 24
    shell: """
    cd $(dirname {output.r1}) && \
    fasterq-dump {input[0]} -o {wildcards.sample} -t /lscratch/$SLURM_JOBID -e {threads} --split-3
    """

rule fq_gzip:
    input:
        r1=rules.fq_dump.output.r1,
        r2=rules.fq_dump.output.r2
    output:
        r1="../output/adult-testis-scRNAseq-wf/fqs/{sample}/{sample}_S1_L001_R1_001.fastq.gz",
        r2="../output/adult-testis-scRNAseq-wf/fqs/{sample}/{sample}_S1_L001_R2_001.fastq.gz"
    threads: 8
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 2,
        time_hr=lambda wildcards, attempt: attempt * 2
    shell: """
    pigz -p {threads} -c {input.r1} > {output.r1} && \
    pigz -p {threads} -c {input.r2} > {output.r2}
    """


################################################################################
# Align and Count
################################################################################
rule cellranger:
    input:
        ref=f"../references/cellranger3/{ASSEMBLY}{TAG}/star/SA",
        r1=rules.fq_gzip.output[0],
        r2=rules.fq_gzip.output[1]
    output: 
        raw_barcodes="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/barcodes.tsv.gz",
        raw_features="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/features.tsv.gz",
        raw_matrix="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/matrix.mtx.gz",
        filtered_barcodes="../output/adult-testis-scRNAseq-wf/{sample}/outs/filtered_feature_bc_matrix/barcodes.tsv.gz",
        filtered_features="../output/adult-testis-scRNAseq-wf/{sample}/outs/filtered_feature_bc_matrix/features.tsv.gz",
        filtered_matrix="../output/adult-testis-scRNAseq-wf/{sample}/outs/filtered_feature_bc_matrix/matrix.mtx.gz",
    params:
        refdir=Path(f"../references/cellranger3/{ASSEMBLY}{TAG}").absolute().as_posix(),
        outdir=Path("../output/adult-testis-scRNAseq-wf").absolute().as_posix()
    threads: 16
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 25,
        time_hr=lambda wildcards, attempt: attempt * 24
    shell: """
    cd {params.outdir} \
    && rm -rf {wildcards.sample} \
    && $HOME/opt/cellranger-3.0.2/cellranger count \
        --id={wildcards.sample} \
        --transcriptome={params.refdir} \
        --fastqs=fqs/{wildcards.sample} \
        --sample={wildcards.sample} \
        --localcores={threads} \
        --localmem={resources.mem_gb}
    """


rule unzip_cellranger3:
    """Cell Ranger v3 gzip outputs but downstream algorithms expect unzipped files."""
    input:
        barcodes="../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/barcodes.tsv.gz",
        features="../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/features.tsv.gz",
        matrix="../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/matrix.mtx.gz",
    output:
        barcodes="../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/barcodes.tsv",
        features="../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/features.tsv",
        matrix="../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/matrix.mtx",
    shell:"""
        gunzip -c {input.barcodes} > {output.barcodes} && \
        gunzip -c {input.features} > {output.features} && \
        gunzip -c {input.matrix} > {output.matrix}
    """


rule barcode_to_cellid:
    """Make a unique cell_id across replicates.

    10X barcodes are not unique across replicates. I simply prepend the
    replicate number to make cell_id unique.
    """
    input: rules.unzip_cellranger3.output.barcodes
    output: "../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/cell_ids.tsv",
    script: "scripts/barcode_to_cellid.py"

rule symlink_genes:
    input: Path(rules.unzip_cellranger3.output.features).absolute().as_posix()
    output: Path("../output/adult-testis-scRNAseq-wf/{sample}/outs/{stage}_feature_bc_matrix/genes.tsv").absolute().as_posix()
    shell: "ln -s {input[0]} {output[0]}"

################################################################################
# Cell Filter Part 1: Droplet Utils remove empty cells
################################################################################
def _dropletutils(wildcards):
    return list(flatten([
        expand(rules.unzip_cellranger3.output.barcodes, sample=wildcards.sample, stage="raw"),
        expand(rules.symlink_genes.output[0], sample=wildcards.sample, stage="raw"),
        expand(rules.unzip_cellranger3.output.matrix, sample=wildcards.sample, stage="raw"),
    ]))


rule dropletutils:
    input: _dropletutils
    output:
        pval_plot="../output/adult-testis-scRNAseq-wf/dropletutils/{sample}_pval.png",
        barcode_rank="../output/adult-testis-scRNAseq-wf/dropletutils/{sample}_bc_rank.png",
        cell_calls=temp("../output/adult-testis-scRNAseq-wf/dropletutils/{sample}_cell_calls.feather")
    conda: "../envs/dropletutils.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: "scripts/dropletutils.R"


rule summary:
    input:
        raw="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/barcodes.tsv",
        filtered="../output/adult-testis-scRNAseq-wf/{sample}/outs/filtered_feature_bc_matrix/barcodes.tsv",
        droputils=rules.dropletutils.output.cell_calls
    output:
        cell_calls="../output/adult-testis-scRNAseq-wf/{sample}_combined_cell_calls.feather",
        upset_plot="../output/adult-testis-scRNAseq-wf/{sample}_combined_upset.svg"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    conda: "../envs/upset.yaml"
    script: "scripts/summary.R"


################################################################################
# Cell Filter Part 2: Scrublet remove heterotypic doublets
################################################################################
rule scrublet:
    input:
        cell_ids="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/cell_ids.tsv",
        matrix="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/matrix.mtx",
        cell_calls=rules.summary.output.cell_calls
    output:
        doublets="../output/adult-testis-scRNAseq-wf/{sample}_scrublet_dublets.txt",
        histogram="../output/adult-testis-scRNAseq-wf/{sample}_scrublet_histogram.png",
        umap="../output/adult-testis-scRNAseq-wf/{sample}_scrublet_umap.png",
        tsne="../output/adult-testis-scRNAseq-wf/{sample}_scrublet_tsne.png",
    params:
        threshold=0.25
    conda: "../envs/scrublet.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: "scripts/run_scrublet.py"


################################################################################
# Save filtered dataset
################################################################################
rule save_filtered_cell_matrix:
    input:
        cell_ids="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/cell_ids.tsv",
        features="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/features.tsv",
        matrix="../output/adult-testis-scRNAseq-wf/{sample}/outs/raw_feature_bc_matrix/matrix.mtx",
        cell_calls=rules.summary.output.cell_calls,
        scrublet=rules.scrublet.output.doublets,
        gene_annotation=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather",
    output:
        barcodes="../output/adult-testis-scRNAseq-wf/{sample}/barcodes.tsv",
        features="../output/adult-testis-scRNAseq-wf/{sample}/genes.tsv",
        matrix="../output/adult-testis-scRNAseq-wf/{sample}/matrix.mtx"
    params:
        low_gene=200,
        high_gene=5000
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: "scripts/filter_cells.py"


rule adult_data:
    input: 
        barcodes=rules.save_filtered_cell_matrix.output.barcodes,
        features=rules.save_filtered_cell_matrix.output.features,
        matrix=rules.save_filtered_cell_matrix.output.matrix
    output: "../output/adult-testis-scRNAseq-wf/raw_{sample}.feather"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 12,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: "scripts/raw_expression_matrix.py"


################################################################################
# Downstream Analysis: Clustering
################################################################################
rule seurat:
    input:
        rmd="scripts/{sample}.Rmd"
    output:
        html="../output/adult-testis-scRNAseq-wf/{sample}.html",
    conda: "../envs/seurat3.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 6
    script: "../scripts/rscript.py"


rule dump_robj:
    input:
        html="../output/adult-testis-scRNAseq-wf/{sample}.html",
        gene_annotation=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather"
    output:
        norm="../output/adult-testis-scRNAseq-wf/{sample}_normalized.feather",
        metadata="../output/adult-testis-scRNAseq-wf/{sample}_metadata.feather",
        pca_embed="../output/adult-testis-scRNAseq-wf/{sample}_pca_cell_embedings.feather",
        pca_load="../output/adult-testis-scRNAseq-wf/{sample}_pca_gene_loadings.feather",
        umap="../output/adult-testis-scRNAseq-wf/{sample}_umap.feather",
    params:
        # TODO: Add resolution
        integrated_resolution=""
    conda: "../envs/seurat3.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 2
    script: "scripts/dump.R"


rule biomarkers:
    input:
        html="../output/adult-testis-scRNAseq-wf/{sample}.html",
        gene_annotation=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather"
    output:
        tsv="../output/adult-testis-scRNAseq-wf/{sample}_biomarkers.tsv",
        feather="../output/adult-testis-scRNAseq-wf/{sample}_biomarkers.feather"
    conda: "../envs/seurat3.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 6
    script: "scripts/combined_biomarkers.R"

