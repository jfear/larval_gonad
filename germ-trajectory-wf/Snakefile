import pandas as pd
import seaborn as sns

from larval_gonad.config import read_config
from larval_gonad.io import safe_gene_name

common_config = read_config("../config/common.yaml")
TAG = common_config["tag"]

lit_genes = read_config("../config/literature_genes.yaml")

cluster_order = ["3", "8", "5", "0", "6", "1", "4", "7", "2"]
cluster_annot = {x: x for x in cluster_order}
colors = sns.color_palette("husl", n_colors=9)


rule all: 
    input:
        "../output/germ-trajectory-wf/umap.feather",
        "../output/germ-trajectory-wf/clusters.feather",
        "../output/germ-trajectory-wf/biomarkers.feather",
        "../output/germ-trajectory-wf/umap_panel.svg",
        expand("../output/germ-trajectory-wf/lit_genes_umap_panel_{group}.svg", group=["G", "G_EPS", "EPS", "EPS_MPS_LPS", "G_MPS_EPS_LPS"]),
        expand("../output/germ-trajectory-wf/lit_genes_expression_patterns_panel_{group}.svg", group=["G", "G_EPS", "EPS", "EPS_MPS_LPS", "G_MPS_EPS_LPS"]),


rule recluster_germ_cells:
    input: 
        robj="../output/seurat3-cluster-wf/combined_n3.Robj",
        gene_annot = "../references/gene_annotation_dmel_r6-26.feather"
    params: germ_clusters=[6, 4, 2, 0]
    conda: "../envs/seurat3.yaml"
    output: 
        umap="../output/germ-trajectory-wf/umap.feather",
        metadata="../output/germ-trajectory-wf/metadata.feather",
        biomarkers="../output/germ-trajectory-wf/biomarkers.feather",
    script: "scripts/seurat3_recluster.R"


rule annot_clusters:
    input: rules.recluster_germ_cells.output.metadata
    output: "../output/germ-trajectory-wf/clusters.feather"
    params: 
        cluster_annot = cluster_annot,
        cluster_order = cluster_order
    run: 
        (
            pd.read_feather(input[0], columns=['cell_id', 'cluster'])
            .assign(
                cluster = lambda x: pd.Categorical(
                    x.cluster.map(params['cluster_annot']), ordered=True, categories=params['cluster_order']
                )
            )
            .assign(rep = lambda x: x.cell_id.str.extract("(rep\d)_.*", expand=False))
            .to_feather(output[0])
        )


rule plot_umap:
    input:
        umap=rules.recluster_germ_cells.output.umap,
        clusters=rules.annot_clusters.output[0]
    params: colors = colors,
    output: "../output/germ-trajectory-wf/umap_panel.svg",
    script: "../seurat3-cluster-wf/scripts/plot_umap.py"
    

rule gene_projections:
    input: 
        zscores="../output/seurat3-cluster-wf/zscore_by_cell.feather",
        umap=rules.recluster_germ_cells.output.umap,
        gene_annot=f"../references/gene_annotation_dmel_{TAG}.feather"
    output: "../output/germ-trajectory-wf/gene_projections/{symbol}_{FBgn}.svg"
    script: "../seurat3-cluster-wf/scripts/individual_gene_feature_plot.py"


def _lit_gene_umap_panel(wildcards):
    fbgn2symbol = (
        pd.read_feather(f"../references/gene_annotation_dmel_{TAG}.feather", columns=["FBgn", "gene_symbol"])
        .set_index("FBgn").squeeze()
    )
    fbgns = lit_genes[wildcards.group]
    symbols = [safe_gene_name(fbgn2symbol[fbgn]) for fbgn in fbgns]
    return expand(
        rules.gene_projections.output[0],
        zip,
        symbol=symbols,
        FBgn=fbgns
    )


rule lit_gene_umap_panel:
    input: _lit_gene_umap_panel
    output: "../output/germ-trajectory-wf/lit_genes_umap_panel_{group}.svg"
    script: "scripts/gene_panels.py"


rule expression_patterns:
    input: 
        norm="../output/seurat3-cluster-wf/combined_n3_normalized.feather",
        clusters=rules.annot_clusters.output[0]
    output: "../output/germ-trajectory-wf/expression_patterns/{symbol}_{FBgn}.svg"
    script: "../seurat3-cluster-wf/scripts/individual_expression_patterns.py"


def _lit_gene_expression_panel(wildcards):
    fbgn2symbol = (
        pd.read_feather(f"../references/gene_annotation_dmel_{TAG}.feather", columns=["FBgn", "gene_symbol"])
        .set_index("FBgn").squeeze()
    )
    fbgns = lit_genes[wildcards.group]
    symbols = [safe_gene_name(fbgn2symbol[fbgn]) for fbgn in fbgns]
    return expand(
        rules.expression_patterns.output[0],
        zip,
        symbol=symbols,
        FBgn=fbgns
    )


rule lit_gene_expression_panel:
    input: _lit_gene_expression_panel
    output: "../output/germ-trajectory-wf/lit_genes_expression_patterns_panel_{group}.svg"
    script: "scripts/gene_panels.py"
