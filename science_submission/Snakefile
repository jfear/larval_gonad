"""Scrip to generate figures and needed material for the Science Submssion.

"""
import os
import yaml
from pathlib import Path

import pandas as pd

from larval_gonad.config import read_config

workdir: "."
configfile: "../config/common.yaml"
colors_config = read_config("../config/colors.yaml")

SAMPLES = ["testis1", "testis2", "testis3"]

REFERENCES_DIR = os.environ.get("REFERENCES_DIR", config.get("REFERENCES_DIR", ""))
ASSEMBLY = config["assembly"]
TAG = config["tag"]

LIT_GENES = read_config("../config/literature_genes.yaml")
PTRAP_GENES = read_config("../config/ptrap_genes.yaml")
COLORS = yaml.full_load(open("../config/colors.yaml"))

wildcard_constraints: 
    sample="testis\d"

rule all:
    input: 
        expand("../output/science_submission/figures/lit_genes_umap_panel_{group}.svg", group=LIT_GENES.keys()),
        expand("../output/science_submission/figures/ptrap_genes_umap_panel_{group}.svg", group=PTRAP_GENES.keys()),
        expand("../output/science_submission/figures/lit_genes_expression_patterns_panel_{group}.svg", group=LIT_GENES.keys()),
        expand("../output/science_submission/figures/ptrap_genes_expression_patterns_panel_{group}.svg", group=PTRAP_GENES.keys()),
        "../output/science_submission/figures/cluster-legend.svg",
        "../output/science_submission/figures/lit-gene-evidence.svg",
        expand(
            "../output/science_submission/figures/GvLPS_{direction}_biased_chrom_location.svg",
            direction=['G', 'LPS']
        ),
        expand(
            "../output/science_submission/figures/{clus}_chrom_enrichment.svg",
            clus=["G", "EPS", "MPS", "LPS"]
        ),
        expand(
            "../output/science_submission/figures/GvLPS_{direction}_expression_by_chrom.svg",
            direction=['G', 'LPS']
        ),


################################################################################
# Part 1: scRNA-Seq intron, cluster, annotate, and validate
################################################################################
rule plot_cluster_legend:
    params:
        cluster_colors=COLORS["clusters"],
        legend_names=config["legend_names"]
    output: "../output/science_submission/figures/cluster-legend.svg"
    script: "scripts/plot_cluster_legend.py"


rule lit_gene_umap_panel:
    input: f"../references/gene_annotation_dmel_{TAG}.feather"
    params: 
        pattern=lambda wildcards: "../output/seurat3-cluster-wf/combined_n3_figures/gene_projections/{symbol}_{FBgn}.svg",
        genes=lambda wildcards: LIT_GENES[wildcards.group]
    output: "../output/science_submission/figures/lit_genes_umap_panel_{group}.svg"
    script: "scripts/gene_panels.py"


rule lit_gene_expression_patterns_panel:
    input: f"../references/gene_annotation_dmel_{TAG}.feather"
    params: 
        pattern=lambda wildcards: "../output/seurat3-cluster-wf/combined_n3_figures/expression_patterns/{symbol}_{FBgn}.svg",
        genes=lambda wildcards: LIT_GENES[wildcards.group]
    output: "../output/science_submission/figures/lit_genes_expression_patterns_panel_{group}.svg"
    script: "scripts/gene_panels.py"


rule ptrap_gene_umap_panel:
    input: f"../references/gene_annotation_dmel_{TAG}.feather"
    params: 
        pattern=lambda wildcards: "../output/seurat3-cluster-wf/combined_n3_figures/gene_projections/{symbol}_{FBgn}.svg",
        genes=lambda wildcards: PTRAP_GENES[wildcards.group]
    output: "../output/science_submission/figures/ptrap_genes_umap_panel_{group}.svg"
    script: "scripts/gene_panels.py"


rule ptrap_gene_expression_patterns_panel:
    input: f"../references/gene_annotation_dmel_{TAG}.feather"
    params: 
        pattern=lambda wildcards: "../output/seurat3-cluster-wf/combined_n3_figures/expression_patterns/{symbol}_{FBgn}.svg",
        genes=lambda wildcards: PTRAP_GENES[wildcards.group]
    output: "../output/science_submission/figures/ptrap_genes_expression_patterns_panel_{group}.svg"
    script: "scripts/gene_panels.py"


rule plot_lit_gene_evidence:
    input:
         gene_metadata = f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather",
         lit_evidence = '../data/external/miriam/lit_gene_dummy_vars.tsv',
         tpm_by_cluster="../output/seurat3-cluster-wf/tpm_by_cluster.feather"
    output: "../output/science_submission/figures/lit-gene-evidence.svg"
    params: cmap=COLORS["heatmap"]
    script: "scripts/plot_lit_gene_evidence.py"


rule ptrap_scores:
    output: "../output/science_submission/ptrap_scores.feather"
    script: "scripts/ptrap-scores.py"


rule plot_heatmap_ptrap_scores:
    input: 
        ptrap = rules.ptrap_scores.output[0],
        gene_annot = "../references/gene_annotation_dmel_r6-26.feather"
    output: "../output/science_submission/figures/heatmap-ptrap-scores.svg"
    script: "scripts/plot_heatmap_ptrap_scores.py"


rule plot_deg_chrom_locs:
    input: 
        tpm="../output/seurat3-cluster-wf/tpm_by_cluster_rep.feather",
        deg="../output/seurat3-cluster-wf/germline_deg/GvLPS_{direction}_biased.pkl",
        gene_annot=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather"
    output: "../output/science_submission/figures/GvLPS_{direction}_biased_chrom_location.svg"
    script: "scripts/plot_locations.py"


rule plot_chrom_bias:
    input:
        tpm="../output/seurat3-cluster-wf/tpm_by_cluster_rep.feather",
        gene_annot=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather"
    output: "../output/science_submission/figures/{clus}_chrom_enrichment.svg"
    script: "scripts/plot_chrom_bias.py"


rule plot_GvLPS_expression_by_chrom:
    input:
        tpm="../output/seurat3-cluster-wf/tpm_by_cluster_rep.feather",
        biased="../output/seurat3-cluster-wf/germline_deg/GvLPS_{direction}_biased.pkl",
        gene_annot=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather"
    output: "../output/science_submission/figures/GvLPS_{direction}_expression_by_chrom.svg"
    script: "scripts/plot_GvLPS_expression_by_chrom.py"



























####################################################################################################




rule all_old:
    input:
        "../output/science_submission/gene_locations.feather",
        # Part 1
        "../output/science_submission/scRNAseq_raw_counts.tsv.gz",
        "../output/science_submission/scRNAseq_seurat_normalized_counts.tsv.gz",
        "../output/science_submission/scRNAseq_raw_counts_by_celltype_rep.tsv.gz",
        "../output/science_submission/scRNAseq_tpm_counts_by_celltype_rep.tsv.gz",
        "../output/science_submission/scRNAseq_zscores_by_celltype_rep.tsv.gz",
        "../output/science_submission/figures/cluster-legend.svg",
        "../output/science_submission/figures/heatmap-lit-gene-evidence.svg",
        "../output/science_submission/figures/heatmap-bulk-scRNAseq-w-rep.svg",
        "../output/science_submission/ptrap_scores.feather",
        "../output/science_submission/figures/heatmap-ptrap-scores.svg",


        # Part 4
        "../output/science_submission/intron_less_genes.pkl",
        "../output/science_submission/non_coding_genes.pkl",
        "../output/science_submission/background_fbgns.pkl",
        "../output/science_submission/figures/heatmap-intronless-genes-w-rep.svg",
        "../output/science_submission/figures/boxplot-intronless_genes.svg",
        # "../output/science_submission/figures/boxplot-expression-diversity.svg",
        # "../output/science_submission/figures/boxplot-male-biased-expression-diversity.svg",
        # "../output/science_submission/figures/barplot_germline_deg.svg",
        # "../output/science_submission/figures/barplot_sp_demasculinization.svg",
        # "../output/science_submission/figures/barplot_m1_demasculinization.svg",
        # "../output/science_submission/figures/scatter_bulk_deg.svg",
        # "../output/science_submission/figures/bubble_germline_deg_GO_BP.svg",
        # "../output/science_submission/figures/bubble_germline_deg_GO_MF.svg",
        # "../output/science_submission/figures/bubble_germline_deg_GO_CC.svg",
        # "../output/science_submission/results_table.xlsx"


################################################################################
# Data Sets
################################################################################
rule gene_locs:
    input: Path(REFERENCES_DIR, ASSEMBLY, TAG, "gtf", f"{ASSEMBLY}_{TAG}.gtf.db").as_posix()
    params: chrom_order=config["chrom_order"]
    output: "../output/science_submission/gene_locations.feather"
    script: "scripts/gene_locations.py"


################################################################################
# Part 1: Clustering calling, annotation, and "validation"
################################################################################

rule raw_to_tsv:
    input: '../output/cellselection-wf/raw.feather'
    output: '../output/science_submission/scRNAseq_raw_counts.tsv.gz'
    run:
        pd.read_feather(input[0]).to_csv(output[0], index=False, sep="\t")


rule seurat_normalized_to_tsv:
    input: '../output/seurat3-cluster-wf/combined_n3_normalized.feather'
    output: '../output/science_submission/scRNAseq_seurat_normalized_counts.tsv.gz'
    run:
        pd.read_feather(input[0]).drop("gene_symbol", axis=1).to_csv(output[0], index=False, sep="\t")


rule raw_by_celltype_to_tsv:
    input: '../output/seurat3-cluster-wf/raw_by_cluster_rep.feather'
    output: '../output/science_submission/scRNAseq_raw_counts_by_celltype_rep.tsv.gz'
    run:
        pd.pivot_table(
            pd.read_feather(input[0]),
            index="FBgn",
            columns=["cluster", "rep"],
            values="UMI",
            aggfunc="first"
        ).to_csv(output[0], sep="\t")


rule tpm_by_celltype_to_tsv:
    input: '../output/seurat3-cluster-wf/tpm_by_cluster_rep.feather'
    output: '../output/science_submission/scRNAseq_tpm_counts_by_celltype_rep.tsv.gz'
    run:
        pd.pivot_table(
            pd.read_feather(input[0]),
            index="FBgn",
            columns=["cluster", "rep"],
            values="TPM",
            aggfunc="first"
        ).to_csv(output[0], sep="\t")


rule zscores_by_celltype_to_tsv:
    input: '../output/seurat3-cluster-wf/zscore_by_cluster_rep.feather'
    output: '../output/science_submission/scRNAseq_zscores_by_celltype_rep.tsv.gz'
    run:
        pd.pivot_table(
            pd.read_feather(input[0]),
            index="FBgn",
            columns=["cluster", "rep"],
            values="zscore",
            aggfunc="first"
        ).to_csv(output[0], sep="\t")



rule plot_heatmap_bulk_scRNAseq_w_rep:
    input:
         bulk="../output/bulk2-rnaseq-wf/rnaseq_aggregation/tpm_gene_level_counts.tsv",
         scrnaseq="../output/seurat3-cluster-wf/tpm_by_cluster_rep.feather"
    output: "../output/science_submission/figures/heatmap-bulk-scRNAseq-w-rep.svg"
    script: "scripts/plot_heatmap_bulk_scRNAseq_w_rep.py"


rule plot_zscore_heatmap:
    input: "../output/science_submission/db/zscore_{gene_set}.dat"
    output: "../output/science_submission/figures/zscore_heatmap_{gene_set}.svg"
    params: COLORS['heatmap']
    script: "scripts/plot_zscore_heatmap.py"


################################################################################
# Part 2: Sex bias expression and MSCI
################################################################################
def _get_gene_set_title(wildcards):
    return config['gene_subset_titles'][wildcards.fbgns]


rule plot_boxplot_autosome_ratios:
    input: '../output/x-to-a-wf/db/{fbgns}.dat'
    output: "../output/science_submission/figures/boxplot.{fbgns}.{ratio_type}.svg"
    params:
          cluster_colors=COLORS["clusters"],
          cluster_order=config['cluster_order'],
          title=_get_gene_set_title
    script: "scripts/plot_boxplot_autosome_ratios.py"


rule plot_boxplot_y_genes:
    input:
        tpm='../output/seurat3-cluster-wf/tpm_by_cluster_rep.feather',
        metadata = "../output/seurat3-cluster-wf/combined_n3_metadata.feather",
        gene_metadata=f"../references/gene_annotation_{ASSEMBLY}_{TAG}.feather"
    output: "../output/science_submission/figures/boxplot-y-genes.svg"
    params:
        cluster_colors=COLORS["clusters"]
    script: "scripts/plot_boxplot_y_genes.py"


rule plot_violin_total_umi:
    input: '../output/seurat3-cluster-wf/raw_by_cluster_rep.feather'
    output: "../output/science_submission/figures/violin-total-umi.svg"
    params:
        cluster_colors = COLORS["clusters"]
    script: "scripts/plot_violin_total_umi.py"


rule plot_boxplot_total_umi:
    input: '../output/seurat3-cluster-wf/raw_by_cluster_rep.feather'
    output: "../output/science_submission/figures/boxplot-total-umi.svg"
    params:
        cluster_colors = COLORS["clusters"]
    script: "scripts/plot_boxplot_total_umi.py"


rule plot_boxplot_demasculinization:
    input:
        #TODO: add bulk file
        bulk='',
        raw='../output/cellselection-wf/raw.feather',
        norm='../output/seurat3-cluster-wf/combined_n3_normalized.feather',
        cell_annotation='../output/seurat3-cluster-wf/combined_n3_metadata.feather',
        gene_annotation='../references/gene_annotation_dmel_r6-26.feather'
    params:
        cluster_annot=config['cluster_annot'],
        cluster_order=config['cluster_annot']
    output:
        pct_cells='../output/science_submission/figures/boxplot-demasculinization-pct-cells.svg',
        norm_expression='../output/science_submission/figures/boxplot-demasculinization-norm-expression.svg'


def _munge_demasculinization_data(wildcards):
    gene_set = wildcards.fbgns
    if gene_set in ["male", "female", "sex_ns"]:
        return '../output/expression-atlas-wf/dmel_sex_biased_expression.tsv'
    if gene_set in ["testis", "ovary", "gonad_ns"]:
        return '../output/expression-atlas-wf/dmel_gonad_biased_expression.tsv'
    if gene_set in ["male_soma", "female_soma", "sex_soma_ns"]:
        return '../output/expression-atlas-wf/dmel_sex_soma_biased_expression.tsv'
    if gene_set in ["larval_testis", "larval_ovary", "larval_gonad_ns"]:
        return '../output/bulk2-rnaseq-wf/deg/bulk_testis_vs_ovary.tsv'


rule munge_demasculinization_data:
    input:
        deg=_munge_demasculinization_data,
        fbgn2chrom='../output/x-to-a-wf/fbgn2chrom.pkl'
    output: '../output/science_submission/db/demasculinization.{fbgns}.dat'
    params: 
        chrom_order=config['chrom_order']
    script: 'scripts/munge_demasculinization_data.py'


rule plot_barplot_demasculinization:
    input: rules.munge_demasculinization_data.output[0]
    output: '../output/science_submission/figures/barplot_demasculinization.{fbgns}.svg'
    params:
        chrom_order=config['chrom_order'],
        title=_get_gene_set_title
    script: "scripts/plot_barplot_demasculinization.py"

# rule plot_boxplot_expression_diversity:
#     input:
#         norm=rules.seurat_norm.output[0],
#         clusters=rules.clusters.output[0]
#     output: "../output/science_submission/figures/boxplot-expression-diversity.svg"
#     params:
#           annotation=config["short_cluster_annot"],
#           cluster_order=config["short_cluster_order"],
#           cluster_colors=config["colors"]["clusters"]
#     script: "scripts/plot_boxplot_expression_diversity.py"

# rule plot_boxplot_male_biased_expression_diversity:
#     input:
#          norm=rules.seurat_norm.output[0],
#          male_bias="../output/bulk-rnaseq-wf/deseq2_tcp_male_biased_expressed_genes.txt",
#          clusters=rules.clusters.output[0]
#     output: "../output/science_submission/figures/boxplot-male-biased-expression-diversity.svg"
#     params:
#           annotation=config["short_cluster_annot"],
#           cluster_order=config["short_cluster_order"],
#           cluster_colors=config["colors"]["clusters"]
#     script: "scripts/plot_boxplot_male_biased_expression_diversity.py"

# rule plot_bubble_y_genes:
#     input:
#          raw="../output/scrnaseq-wf/raw.parquet",
#          clusters="../output/scrnaseq-wf/clusters.parquet",
#          fbgn2chrom="../output/x-to-a-wf/fbgn2chrom.parquet",
#          fbgn2symbol=rules.fbgn2symbol.output[0]
#     output: "../output/science_submission/figures/bubble-y-genes.svg"
#     params:
#           annotation=config["short_cluster_annot"],
#           cluster_order=config["short_cluster_order"],
#           cluster_colors=config["colors"]["clusters"],
#           cmap=config["colors"]["heatmap"]
#     script: "scripts/plot_bubble_y_genes.py"

# rule plot_heatmap_y_genes:
#     input:
#          zscores="../output/scrnaseq-wf/tpm_zscore_w_rep.parquet",
#          fbgn2chrom="../output/x-to-a-wf/fbgn2chrom.parquet",
#          fbgn2symbol=rules.fbgn2symbol.output[0]
#     output: "../output/science_submission/figures/heatmap-y-genes.svg"
#     params:
#           annotation=config["short_cluster_annot"],
#           cluster_order=config["short_cluster_order"],
#           cluster_colors=config["colors"]["clusters"],
#           cmap=config["colors"]["heatmap"]
#     script: "scripts/plot_heatmap_y_genes.py"

# rule plot_bubble_msl_genes:
#     input:
#          raw="../output/scrnaseq-wf/raw.parquet",
#          clusters="../output/scrnaseq-wf/clusters.parquet",
#          fbgn2symbol=rules.fbgn2symbol.output[0]
#     output: "../output/science_submission/figures/bubble-msl-genes.svg"
#     params:
#           annotation=config["short_cluster_annot"],
#           cluster_order=config["short_cluster_order"],
#           cluster_colors=config["colors"]["clusters"],
#           cmap=config["colors"]["heatmap"],
#           msl_genes=config["msl_genes"]
#     script: "scripts/plot_bubble_msl_genes.py"

# rule plot_heatmap_msl_genes:
#     input:
#          zscores="../output/scrnaseq-wf/tpm_zscore_w_rep.parquet",
#          fbgn2symbol=rules.fbgn2symbol.output[0]
#     output: "../output/science_submission/figures/heatmap-msl-genes.svg"
#     params:
#           annotation=config["short_cluster_annot"],
#           cluster_order=config["short_cluster_order"],
#           cluster_colors=config["colors"]["clusters"],
#           msl_genes=config["msl_genes"],
#           cmap=config["colors"]["heatmap"]
#     script: "scripts/plot_heatmap_msl_genes.py"

################################################################################
# Part 4: Gene Movement
################################################################################

rule non_coding_genes:
    input: Path(REFERENCES_DIR, ASSEMBLY, TAG, "gtf", f"{ASSEMBLY}_{TAG}.gtf.db").as_posix()
    output: "../output/science_submission/non_coding_genes.pkl"
    script: "scripts/non_coding_genes.py"


rule background:
    input: "../output/cellselection-wf/raw.feather"
    output: "../output/science_submission/background_fbgns.pkl"
    run:
        import pandas as pd
        import pickle
        fbgns = (
            pd.read_feather(input[0])
            .set_index("FBgn")
            .sum(axis=1)
            .pipe(lambda df: df[df > 0])
            .index.values
        )
        with open(output[0], "wb") as fh:
            pickle.dump(fbgns, fh)


rule intron_less_genes:
    input: Path(REFERENCES_DIR, ASSEMBLY, TAG, "gtf", f"{ASSEMBLY}_{TAG}.gtf.db").as_posix()
    output: "../output/science_submission/intron_less_genes.pkl"
    script: "scripts/intron_less_genes.py"


rule plot_heatmap_intronless_genes:
    input:
         zscores='../output/seurat3-cluster-wf/zscore_by_cluster_rep.feather',
         intronless=rules.intron_less_genes.output[0]
    output: "../output/science_submission/figures/heatmap-intronless-genes-w-rep.svg"
    params: cmap=COLORS["heatmap"]
    script: "scripts/plot_heatmap_intronless_genes.py"


rule plot_boxplot_intronless_genes:
    input: 
        gonia_vs_cytes = '../output/seurat3-cluster-wf/combined_n3_gonia_vs_cytes.feather',
        background=rules.background.output[0],
        intronless=rules.intron_less_genes.output[0]
    output: "../output/science_submission/figures/boxplot-intronless_genes.svg"
    script: "scripts/plot_boxplot_intronless_genes.py"


# rule plot_barplot_germline_deg:
#     input:
#         gonia="../output/scrnaseq-wf/germcell_deg/gonia_vs_cytes.tsv",
#         early="../output/scrnaseq-wf/germcell_deg/gonia_vs_early.tsv",
#         mid="../output/scrnaseq-wf/germcell_deg/early_vs_mid.tsv",
#         late="../output/scrnaseq-wf/germcell_deg/mid_vs_late.tsv",
#         fbgn2chrom="../output/x-to-a-wf/fbgn2chrom.parquet",
#         background=rules.background.output[0]
#     output: "../output/science_submission/figures/barplot_germline_deg.svg"
#     script: "scripts/plot_barplot_germline_deg.py"

# rule plot_bubble_germline_deg_GO_BP:
#     input:
#          deg="../output/scrnaseq-wf/germcell_deg/gonia_vs_mid.tsv",
#          background=rules.background.output[0]
#     output: "../output/science_submission/figures/bubble_germline_deg_GO_BP.svg"
#     script: "scripts/plot_bubble_germline_deg_GO_BP.py"

# rule plot_barplot_sp_demasculinization:
#     input:
#          bulk_deg="../output/bulk-rnaseq-wf/deseq2_results_tcp_vs_ocp.tsv",
#          sc_deg="../output/scrnaseq-wf/germcell_deg/gonia_vs_cytes.tsv",
#          fbgn2chrom="../output/x-to-a-wf/fbgn2chrom.parquet"
#     output: "../output/science_submission/figures/barplot_sp_demasculinization.svg"
#     script: "scripts/plot_barplot_sp_demasculinization.py"

# rule plot_barplot_m1_demasculinization:
#     input:
#          bulk_deg="../output/bulk-rnaseq-wf/deseq2_results_tcp_vs_ocp.tsv",
#          sc_deg="../output/scrnaseq-wf/germcell_deg/gonia_vs_mid.tsv",
#          fbgn2chrom="../output/x-to-a-wf/fbgn2chrom.parquet"
#     output: "../output/science_submission/figures/barplot_m1_demasculinization.svg"
#     script: "scripts/plot_barplot_m1_demasculinization.py"

# rule plot_bubble_germline_deg_GO_MF:
#     input:
#          deg="../output/scrnaseq-wf/germcell_deg/gonia_vs_mid.tsv",
#          background=rules.background.output[0]
#     output: "../output/science_submission/figures/bubble_germline_deg_GO_MF.svg"
#     script: "scripts/plot_bubble_germline_deg_GO_MF.py"

# rule plot_bubble_germline_deg_GO_CC:
#     input:
#          deg="../output/bulk-rnaseq-wf/deseq2_results_tcp_vs_ocp.tsv",
#          background=rules.background.output[0]
#     output: "../output/science_submission/figures/bubble_germline_deg_GO_CC.svg"
#     script: "scripts/plot_bubble_germline_deg_GO_CC.py"

# rule plot_scatter_bulk_deg:
#     input:
#          deg="../output/bulk-rnaseq-wf/deseq2_results_tcp_vs_ocp.tsv"
#     output: "../output/science_submission/figures/scatter_bulk_deg.svg"
#     script: "scripts/plot_scatter_bulk_deg.py"

################################################################################
# Aggregated Metadata Tables
################################################################################

# rule sample_metadata:

# rule cell_metadata:

# rule gene_metadata:


# rule differential_expression_tables:
#     input:
#          biomarkers="../output/scrnaseq-wf/scrnaseq_combine_force/biomarkers_res.0.6.tsv",
#          germ_soma="../output/scrnaseq-wf/germcell_soma_deg/germ_vs_soma.tsv",
#          gonia_cytes="../output/scrnaseq-wf/germcell_deg/gonia_vs_cytes.tsv",
#          gonia_early="../output/scrnaseq-wf/germcell_deg/gonia_vs_early.tsv",
#          gonia_mid="../output/scrnaseq-wf/germcell_deg/gonia_vs_mid.tsv",
#          gonia_late="../output/scrnaseq-wf/germcell_deg/gonia_vs_late.tsv",
#          raw="../output/scrnaseq-wf/raw_by_cluster_w_rep.parquet",
#          tpm="../output/scrnaseq-wf/tpm_w_rep.parquet",
#          zscore="../output/scrnaseq-wf/tpm_zscore_w_rep.parquet",
#     output: "../output/science_submission/tables/scRNASeq_cluster_deg.xlsx"
#     script: "scripts/table_scRNASeq_cluster_deg.py"

# rule results_table:
#     input:
#         config_name="results_table_config.yaml",
#         fbgn2chrom="../output/x-to-a-wf/fbgn2chrom.parquet",
#         fbgn2symbol=rules.fbgn2symbol.output[0],
#         biomarkers=rules.biomarkers.output[0]
#     params:
#         annotation=config["short_cluster_annot"],
#         cluster_order=config["short_cluster_order"],
#         legend_names=config["legend_names"]
#     output: "../output/science_submission/results_table.xlsx"
#     script: "scripts/results_table.py"


################################################################################
# Helpers
################################################################################

# rule svg_png:
#     input: "{fig}.svg"
#     output: "{fig}.png"
#     shell: "inkscape {input[0]} --export-png={output[0]} --export-dpi=800 --export-background="white" --without-gui"

# rule svg_pdf:
#     input: "{fig}.svg"
#     output: "{fig}.pdf"
#     shell: "inkscape {input[0]} --export-pdf={output[0]}"
