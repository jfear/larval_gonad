"""Plot tSNE

Plots the tsne generated by `scrnaseq-wf/scripts/scrnaseq_combine_force.Rmd`.

"""
import matplotlib as mpl

mpl.use('Agg')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

clusters = snakemake.input.clusters
tsne = snakemake.input.tsne
oname = snakemake.output[0]
colors = snakemake.params.colors
cluster_order = snakemake.params.cluster_order


def main():
    df = get_data()

    plt.style.use('scripts/paper_1c.mplstyle')
    fig, ax = plt.subplots(figsize=(2, 2))

    ax.scatter(df.tSNE_1, df.tSNE_2, c=df.color, s=3, linewidth=.02, edgecolor='k', rasterized=True)

    # Add text for cluster names
    for clus, row in df.groupby('cluster').agg({'tSNE_1': 'mean', 'tSNE_2': 'mean'}).iterrows():
        if clus == 'UNK':
            continue
        plt.text(row.tSNE_1, row.tSNE_2, clus,
                 bbox=dict(facecolor=(1, 1, 1, .8), edgecolor='none', pad=.2),
                 ha='center', va='center', fontsize=7, fontweight='bold')

    # clean up plot
    plt.setp(ax, xticks=[], yticks=[], xlabel='', ylabel='', aspect='equal')
    sns.despine(ax=ax, top=True, bottom=True, left=True, right=True)
    plt.tight_layout()

    fig.savefig(oname, bbox_inches='tight')


def get_data():
    cmap = dict(zip(cluster_order + ['UNK', 'UNK', 'UNK'], colors))

    return (
        pd.read_parquet(tsne)
        .join(pd.read_parquet(clusters))
        .assign(color=lambda df: df.cluster.map(cmap))
    )


if __name__ == '__main__':
    main()
