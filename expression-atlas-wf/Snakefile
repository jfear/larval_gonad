from more_itertools import flatten
import pandas as pd
from snakemake.rules import expand

from larval_gonad.config import read_config
from larval_gonad.io import pickle_dump

# Config information
configfile: "config/config.yaml"
common_config = read_config('../config/common.yaml')

# Sample Information
sampletable = pd.read_csv('config/sampletable.tsv', sep='\t')
sample2attrs = pd.concat([
    sampletable.samplename,
    sampletable.samplename.str.extract('(?P<species>\w+)_(?P<tissue>\w+)_(?P<sex>\w+)_(?P<rep>\w+)')
], axis=1, sort=True).set_index("samplename")

species2tissue = (
    sample2attrs[['species', 'tissue']]
    .drop_duplicates()
    .set_index("species", drop=True)
    .squeeze()
)

# Useful globals
TAG = common_config['tag']
TISSUE = sample2attrs.tissue.unique().tolist()
SAMPLES = sample2attrs.index.values.tolist()

rule all:
    input: 
        "../output/expression-atlas-wf/w1118_gene_counts.feather",
        "../output/expression-atlas-wf/OreR_gene_counts.feather",
        expand('../output/expression-atlas-wf/tau_housekeeping/{sex}_fbgns.pkl', sex=["male", "female"]),
        expand('../output/expression-atlas-wf/tsps_housekeeping/{sex}_fbgns.pkl', sex=["male", "female"]),
        "../output/expression-atlas-wf/dmel_sex_biased_expression.feather",

################################################################################
# Download data
################################################################################
rule download_annotation:
    params: 'ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE99nnn/GSE99574/suppl/GSE99574_{species}.YO.annotation.tar.gz'
    output: '../output/expression-atlas-wf/GTF/{species}.gtf'
    script: 'scripts/download_annotation.py'


rule download_orthologs:
    params: 'ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE99nnn/GSE99574/suppl/GSE99574_{species}.ortholog.txt.tar.gz'
    output: '../output/expression-atlas-wf/orthologs/{species}.tsv'
    script: 'scripts/download_ortholog.py'


def _download_coverage_counts(wildcards):
    samplename = wildcards.samplename
    gsm = sampletable.loc[sampletable.samplename == samplename, 'GSM'].values[0]
    short = gsm[:7]
    return f'ftp://ftp.ncbi.nlm.nih.gov/geo/samples/{short}nnn/{gsm}/suppl/{gsm}_{samplename}.htseq_reverse.HiSAT2.YO.txt.gz'


rule download_coverage_counts:
    params: _download_coverage_counts
    output: '../output/expression-atlas-wf/raw_counts/{samplename}.tsv'
    script: 'scripts/download_coverage_counts.py'


################################################################################
# Prep metadata
################################################################################
rule yogn_to_metadata:
    input: rules.download_annotation.output[0]
    output: '../output/expression-atlas-wf/YOgn_metadata/{species}.feather'
    script: "scripts/yogn_to_metadata.py"


def _yogn_to_metadata_dmel_translate(wildcards):
    species = wildcards.species
    if (species == "w1118") | (species == "orgR"):
        species = "dmel"
    return rules.yogn_to_metadata.output[0].format(species=species)


rule yogn_to_dmel_ortholog:
    input: rules.download_orthologs.output[0]
    # pickle: dict
    output: '../output/expression-atlas-wf/YOgn_to_dmel_ortholog/{species}.pkl'
    script: "scripts/yogn_to_dmel_ortholog.py"


def _yogn_to_dmel_ortholog_dmel_translate(wildcards):
    species = wildcards.species
    if (species == "w1118") | (species == "orgR"):
        species = "dmel"
    return rules.yogn_to_dmel_ortholog.output[0].format(species=species)


################################################################################
# Counts Table
################################################################################
def _species_counts_table(wildcards):
    return expand(
        rules.download_coverage_counts.output[0],
        samplename=sample2attrs.query(f'species == "{wildcards.species}"').index.tolist()
    )


rule species_counts_table:
    input: _species_counts_table
    output: "../output/expression-atlas-wf/aggregated_counts_table/{species}.feather"
    script: "scripts/species_counts_table.py"


# Aggregate w1118 counts
rule w1118_counts:
    input: 
        orthologs=expand(rules.yogn_to_dmel_ortholog.output[0], species=["dmel"])[0],
        gene_annot="../references/gene_annotation_dmel_r6-26.feather",
        counts=expand(rules.species_counts_table.output[0], species="w1118")[0],
    output: "../output/expression-atlas-wf/w1118_gene_counts.feather"
    script: "scripts/w1118_counts.py"


# Aggregate OregonR counts
rule OreR_counts:
    input: 
        orthologs=expand(rules.yogn_to_dmel_ortholog.output[0], species=["dmel"])[0],
        gene_annot="../references/gene_annotation_dmel_r6-26.feather",
        counts=expand(rules.species_counts_table.output[0], species="orgR")[0],
    output: "../output/expression-atlas-wf/OreR_gene_counts.feather"
    script: "scripts/OreR_counts.py"


################################################################################
# Identify Housekeeping Genes
################################################################################
rule tau:
    input: 
        counts=rules.species_counts_table.output[0],
        metadata=_yogn_to_metadata_dmel_translate
    output: '../output/expression-atlas-wf/tau/{species}.feather'
    script: 'scripts/calculate_tau.py'


rule tau_housekeeping_fbgns:
    input: rules.tau.output[0]
    params: config['tau_cutoff']
    # pickle: list
    output: 
        male='../output/expression-atlas-wf/tau_housekeeping/{species}_male.pkl',
        female='../output/expression-atlas-wf/tau_housekeeping/{species}_female.pkl',
        svg='../output/expression-atlas-wf/tau_housekeeping/{species}.svg'
    script: "scripts/tau_housekeeping_yogns.py"


rule dmel_tau_housekeeping:
    input: 
        male=expand(
            rules.tau_housekeeping_fbgns.output.male,
            species=["w1118", "orgR"]
        ),
        female=expand(
            rules.tau_housekeeping_fbgns.output.female,
            species=["w1118", "orgR"]
        ),
        annot=expand(rules.yogn_to_dmel_ortholog.output[0], species="dmel")
    # pickle: list
    output: 
        male='../output/expression-atlas-wf/tau_housekeeping/male_fbgns.pkl',
        female='../output/expression-atlas-wf/tau_housekeeping/female_fbgns.pkl'
    script: 'scripts/dmel_tau_housekeeping.py'


rule tsps:
    input: 
        counts=rules.species_counts_table.output[0],
        metadata=_yogn_to_metadata_dmel_translate
    output: '../output/expression-atlas-wf/tsps/{species}.feather'
    script: 'scripts/calculate_tsps.py'


rule tsps_housekeeping_fbgns:
    input: rules.tau.output[0]
    params: config['tsps_cutoff']
    # pickle: list
    output: 
        male='../output/expression-atlas-wf/tsps_housekeeping/{species}_male.pkl',
        female='../output/expression-atlas-wf/tsps_housekeeping/{species}_female.pkl',
        svg='../output/expression-atlas-wf/tsps_housekeeping/{species}.svg'
    script: "scripts/tsps_housekeeping_yogns.py"


rule dmel_tsps_housekeeping:
    input: 
        male=expand(
            rules.tsps_housekeeping_fbgns.output.male,
            species=["w1118", "orgR"]
        ),
        female=expand(
            rules.tsps_housekeeping_fbgns.output.female,
            species=["w1118", "orgR"]
        ),
        annot=expand(rules.yogn_to_dmel_ortholog.output[0], species="dmel")
    # pickle: list
    output: 
        male='../output/expression-atlas-wf/tsps_housekeeping/male_fbgns.pkl',
        female='../output/expression-atlas-wf/tsps_housekeeping/female_fbgns.pkl'
    script: 'scripts/dmel_tsps_housekeeping.py'


################################################################################
# Sex Biased Gene Expression
################################################################################
rule sex_bias_expression:
    input:
        sampletable = 'config/sampletable.tsv',
        counts_table = rules.species_counts_table.output[0]
    output: '../output/expression-atlas-wf/sex_biased_expression/{species}_{tissue}.tsv'
    log: '../output/expression-atlas-wf/sex_biased_expression/{species}_{tissue}.log'
    conda: "../envs/deseq2.yaml"
    script: 'scripts/sex_bias_expression.R'


rule merge_sex_bias_expression:
    input: 
        deg=expand(
            '../output/expression-atlas-wf/sex_biased_expression/{species}_{tissue}.tsv', 
            species=["w1118", "orgR"], 
            tissue=["AC", "DG", "GE", "GO", "HD", "RE", "TX", "WB"]
        ),
        yogn2fbgn="../output/expression-atlas-wf/YOgn_to_dmel_ortholog/dmel.pkl"
    output: "../output/expression-atlas-wf/dmel_sex_biased_expression.feather"
    script: "scripts/merge_sex_bias_expression.py"

################################################################################
# Deprecated
################################################################################
# Prep metadata
rule muller_arm_assignment:
    input: 
        yogn_annot=rules.yogn_to_metadata.output[0],
        orthologs=rules.yogn_to_dmel_ortholog.output[0],
        gene_annot=f"../references/gene_annotation_dmel_{TAG}.feather",
        primary2secondary=f"../references/primary2secondary_dmel_{TAG}.pkl"
    # pickle: dict
    output: '../output/expression-atlas-wf/YOgn_to_muller/{species}.pkl'
    script: 'scripts/muller_arm_assignment.py'


def _muller_arm_assignment_dmel_translate(wildcards):
    species = wildcards.species
    if (species == "w1118") | (species == "orgR"):
        species = "dmel"
    return rules.muller_arm_assignment.output[0].format(species=species)


rule fbgn_to_muller:
    input: 
        muller=rules.muller_arm_assignment.output[0],
        ortholog=rules.yogn_to_dmel_ortholog.output[0]
    # pickle: pd.Series
    output: temp("../output/expression-atlas-wf/FBgn_to_muller_{species}.pkl")
    script: "scripts/FBgn_to_muller.py"


rule aggregated_muller_table:
    input: expand(rules.fbgn_to_muller.output[0], species=config["species_order_w_dmel"])
    params: species=config['species_order_w_dmel']
    output: "../output/expression-atlas-wf/aggregated_muller_table.feather"
    script: "scripts/aggregated_muller_table.py"


rule species_for_maria:
    input: 
        muller=rules.aggregated_muller_table.output[0],
        yogns=expand(rules.yogn_to_dmel_ortholog.output[0], species=config["species_order_w_dmel"]),
    output: "../output/expression-atlas-wf/species_for_maria.tsv"
    script: "scripts/species_for_maria.py"


rule scaffolds_for_maria:
    input:
        orthologs=expand(rules.yogn_to_dmel_ortholog.output[0], species=config["species_order_w_dmel"]),
        scaffolds=expand(rules.yogn_to_metadata.output[0], species=config["species_order_w_dmel"]),
    output: "../output/expression-atlas-wf/scaffolds_for_maria.tsv"
    script: "scripts/scaffolds_for_maria.py"


# Sex Biased Expression
rule sex_bias_by_muller:
    input: 
        muller=_muller_arm_assignment_dmel_translate,
        deg=rules.sex_bias_expression.output[0]
    params: alpha=config['alpha']
    # shelve: data=pd.DataFrame, male_qval=pd.DataFrame, female_qval=pd.DataFrame
    output: '../output/expression-atlas-wf/sex_bias_by_muller/{species}_{tissue}.dat'
    script: "scripts/sex_bias_by_muller.py"


rule sex_bias_by_muller_all_genes:
    """Same as rules.sex_bias_by_muller except includes all genes in the
    annotation, not just those expressed."""
    input: 
        muller=_muller_arm_assignment_dmel_translate,
        deg=rules.sex_bias_expression.output[0]
    params: alpha=config['alpha']
    # shelve: data=pd.DataFrame, male_qval=pd.DataFrame, female_qval=pd.DataFrame
    output: '../output/expression-atlas-wf/sex_bias_by_muller_all_genes/{species}_{tissue}.dat'
    script: "scripts/sex_bias_by_muller_all_genes.py"


rule sex_bias_by_muller_x_and_4th:
    """Same as rules.sex_bias_by_muller except aggregates autsomes to only
    tests for X and 4th."""
    input: 
        muller=_muller_arm_assignment_dmel_translate,
        deg=rules.sex_bias_expression.output[0]
    params: alpha=config['alpha']
    # shelve: data=pd.DataFrame, male_qval=pd.DataFrame, female_qval=pd.DataFrame
    output: '../output/expression-atlas-wf/sex_bias_by_muller_x_and_4th/{species}_{tissue}.dat'
    script: "scripts/sex_bias_by_muller_x_and_4th.py"


rule plot_demas_x_and_4th:
    input: rules.sex_bias_by_muller_x_and_4th.output[0]
    params: colors=["blue", "lightgray", "red"]
    output: "../output/expression-atlas-wf/figures/demas_x_and_4th/{species}_{tissue}.svg"
    script: "scripts/plot_demas_x_and_4th.py"
