from more_itertools import flatten
import pandas as pd
from snakemake.rules import expand

from larval_gonad.config import read_config
from larval_gonad.io import pickle_dump

configfile: "config/config.yaml"

common_config = read_config('../config/common.yaml')
sampletable = pd.read_csv('config/sampletable.tsv', sep='\t')
sample2attrs = pd.concat([
    sampletable.samplename,
    sampletable.samplename.str.extract('(?P<species>\w+)_(?P<tissue>\w+)_(?P<sex>\w+)_(?P<rep>\w+)')
], axis=1, sort=True).set_index("samplename")

species2tissue = sample2attrs[['species', 'tissue']].drop_duplicates().set_index("species", drop=True)

SPECIES = sample2attrs.species.unique().tolist()
TISSUE = sample2attrs.tissue.unique().tolist()
SAMPLES = sample2attrs.index.values.tolist()

            # remove w1118 and orgR and replace with dmel
SPECIES_W_DMEL = [
                sp
                for sp in SPECIES
                if sp.startswith("d")
            ] + ['dmel']


rule all:
    input: 
        expand('../output/expression-atlas-wf/GTF/{species}.gtf', species=SPECIES_W_DMEL),
        expand('../output/expression-atlas-wf/orthologs/{species}.tsv', species=SPECIES_W_DMEL),
        expand("../output/expression-atlas-wf/{species}_counts.feather", species=SPECIES)
        # '../output/expression-atlas-wf/raw_counts.feather',
        # '../output/expression-atlas-wf/ortholog_annotation.feather',
        # '../output/expression-atlas-wf/FB_ortholog_annotation.feather',
        # '../output/expression-atlas-wf/muller_arm_assignment.feather',
        # '../output/expression-atlas-wf/dist_dmel_tau.svg',
        # '../output/expression-atlas-wf/dmel_male_tau_fbgns.pkl',
        # '../output/expression-atlas-wf/dmel_female_tau_fbgns.pkl',
        # '../output/expression-atlas-wf/dist_dmel_tsps.svg',
        # '../output/expression-atlas-wf/dmel_male_tsps_fbgns.pkl',
        # '../output/expression-atlas-wf/dmel_female_tsps_fbgns.pkl',
        # '../output/expression-atlas-wf/sex_biased_expression.feather',


rule download_annotation:
    params: 'ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE99nnn/GSE99574/suppl/GSE99574_{species}.YO.annotation.tar.gz'
    output: '../output/expression-atlas-wf/GTF/{species}.gtf'
    script: 'scripts/download_annotation.py'


rule download_orthologs:
    params: 'ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE99nnn/GSE99574/suppl/GSE99574_{species}.ortholog.txt.tar.gz'
    output: '../output/expression-atlas-wf/orthologs/{species}.tsv'
    script: 'scripts/download_ortholog.py'


def _download_coverage_counts(wildcards):
    samplename = wildcards.samplename
    gsm = sampletable.loc[sampletable.samplename == samplename, 'GSM'].values[0]
    short = gsm[:7]
    return f'ftp://ftp.ncbi.nlm.nih.gov/geo/samples/{short}nnn/{gsm}/suppl/{gsm}_{samplename}.htseq_reverse.HiSAT2.YO.txt.gz'


rule download_coverage_counts:
    params: _download_coverage_counts
    output: '../output/expression-atlas-wf/raw_counts/{samplename}.tsv'
    script: 'scripts/download_coverage_counts.py'


def _species_counts_table(wildcards):
    return expand(
        '../output/expression-atlas-wf/raw_counts/{samplename}.tsv',
        samplename=sample2attrs.query(f'species == "{wildcards.species}"').index.tolist()
    )

rule species_counts_table:
    input: _species_counts_table
    output: "../output/expression-atlas-wf/{species}_counts.feather"
    script: "scripts/species_counts_table.py"


rule coverage_table:
    input: 
        counts = expand(
            '../output/expression-atlas-wf/raw_counts/{samplename}.tsv', 
            samplename = sampletable.samplename.tolist(),
        ),
        orthologs = expand(
            '../output/expression-atlas-wf/orthologs/{species}.tsv', 
            # remove w1118 and orgR and replace with dmel
            species=[
                sp
                for sp in SPECIES
                if sp.startswith("d")
            ] + ['dmel']
        )
    output: '../output/expression-atlas-wf/raw_counts.feather'
    script: 'scripts/build_counts_table.py'


rule ortholog_annotation:
    input: 
        orthologs = expand(
            '../output/expression-atlas-wf/orthologs/{species}.tsv', 
            # remove w1118 and orgR and replace with dmel
            species=[
                sp
                for sp in SPECIES
                if sp.startswith("d")
            ] + ['dmel']
        ),
        gtf = expand(
            '../output/expression-atlas-wf/GTF/{species}.gtf', 
            # remove w1118 and orgR and replace with dmel
            species=[
                sp
                for sp in SPECIES
                if sp.startswith("d")
            ] + ['dmel']
        )
    output: '../output/expression-atlas-wf/ortholog_annotation.feather'
    script: 'scripts/ortholog_annotation.py'


rule fb_location_table:
    params: "ftp://ftp.flybase.net/releases/FB2018_05/precomputed_files/orthologs/dmel_orthologs_in_drosophila_species_fb_2018_05.tsv.gz"
    output: '../output/expression-atlas-wf/FB_ortholog_annotation.feather'
    script: 'scripts/fb_ortholog_annotation.py'


def _muller_arm_assignment(wildcards):
    prefix = wildcards.prefix
    return {
        'YO': rules.ortholog_annotation.output[0],
        'FB': rules.fb_location_table.output[0],
    }[prefix]


rule muller_arm_assignment:
    input: 
        gene_annotation = '../references/gene_annotation_dmel_r6-24.feather',
        orthologs = _muller_arm_assignment,
        primary2secondary = '../references/primary2secondary_dmel_r6-24.pkl'
    output: '../output/expression-atlas-wf/{prefix}_muller_arm_assignment.feather'
    script: 'scripts/muller_arm_assignment.py'


rule combine_YO_FB:
    input: 
        yo = '../output/expression-atlas-wf/YO_muller_arm_assignment.feather',
        fb = '../output/expression-atlas-wf/FB_muller_arm_assignment.feather',
    output: '../output/expression-atlas-wf/muller_arm_assignment.feather'
    script: 'scripts/combine_muller_arm_assignments.py'


rule tau:
    input: 
        counts = rules.coverage_table.output[0],
        sampletable = 'config/sampletable.tsv',
        gene_annot = '../references/gene_annotation_dmel_r6-24.feather',
    output: '../output/expression-atlas-wf/dmel_tau.feather'
    script: 'scripts/calculate_tau.py'


rule plot_tau:
    input: rules.tau.output[0]
    output: '../output/expression-atlas-wf/dist_dmel_tau.svg'
    script: './scripts/plot_dist_tau.py'


rule dmel_tau_fbgns:
    input: rules.tau.output[0]
    output: 
        male='../output/expression-atlas-wf/dmel_male_tau_fbgns.pkl',
        female='../output/expression-atlas-wf/dmel_female_tau_fbgns.pkl',
    params: config['tau_cutoff']
    run:
        df = pd.read_feather(input[0]).set_index("FBgn")
        pickle_dump(df.query(f"male_tau <= {params[0]}").index.tolist(), output['male'])
        pickle_dump(df.query(f"female_tau <= {params[0]}").index.tolist(), output['female'])


rule tsps:
    input: 
        counts = rules.coverage_table.output[0],
        sampletable = 'config/sampletable.tsv',
        gene_annot = '../references/gene_annotation_dmel_r6-24.feather',
    output: '../output/expression-atlas-wf/dmel_tsps.feather'
    script: 'scripts/calculate_tsps.py'


rule plot_tsps:
    input: rules.tsps.output[0]
    output: '../output/expression-atlas-wf/dist_dmel_tsps.svg'
    script: './scripts/plot_dist_tsps.py'


rule dmel_tsps_fbgns:
    input: rules.tsps.output[0]
    output: 
        male='../output/expression-atlas-wf/dmel_male_tsps_fbgns.pkl',
        female='../output/expression-atlas-wf/dmel_female_tsps_fbgns.pkl',
    params: config['tsps_cutoff']
    run:
        df = pd.read_feather(input[0]).set_index("FBgn")
        pickle_dump(df.query(f"male_tsps <= {params[0]}").index.tolist(), output['male'])
        pickle_dump(df.query(f"female_tsps <= {params[0]}").index.tolist(), output['female'])


rule sex_bias_expression:
    input:
        sampletable = 'config/sampletable.tsv',
        counts_table = rules.coverage_table.output[0]
    output: '../output/expression-atlas-wf/sex_bias_{species}_{tissue}.tsv'
    log: '../output/expression-atlas-wf/sex_bias_{species}_{tissue}.log'
    conda: "../envs/deseq2.yaml"
    script: 'scripts/sex_bias_expression.R'


rule sex_biased_fbgns:
    input: rules.sex_bias_expression.output[0]
    output: 
        male='../output/expression-atlas-wf/sex_biased_male_{species}_{tissue}_fbgns.pkl',
        female='../output/expression-atlas-wf/sex_biased_female_{species}_{tissue}_fbgns.pkl',
        ns='../output/expression-atlas-wf/sex_biased_ns_{species}_{tissue}_fbgns.pkl',
    run:
        df = pd.read_csv(input[0], sep='\t').set_index("FBgn")
        pickle_dump(df.query(f"padj <= 0.01 & log2FoldChange > 0").index.tolist(), output['male'])
        pickle_dump(df.query(f"padj <= 0.01 & log2FoldChange < 0").index.tolist(), output['female'])
        pickle_dump(df.query(f"padj > 0.01").index.tolist(), output['ns'])


def _sex_biased_fbgns(wildcards):
    return list(flatten([
        expand(
            '../output/expression-atlas-wf/sex_biased_male_{species}_{tissue}_fbgns.pkl',
            zip,
            species=sample_attrs.species.tolist(),
            tissue=sample_attrs.tissue.tolist(),
        ),
        expand(
            '../output/expression-atlas-wf/sex_biased_female_{species}_{tissue}_fbgns.pkl',
            zip,
            species=sample_attrs.species.tolist(),
            tissue=sample_attrs.tissue.tolist(),
        ),
        expand(
            '../output/expression-atlas-wf/sex_biased_ns_{species}_{tissue}_fbgns.pkl',
            zip,
            species=sample_attrs.species.tolist(),
            tissue=sample_attrs.tissue.tolist(),
        ),
    ]))


rule sex_biased_summary_table:
    input: _sex_biased_fbgns
    output: '../output/expression-atlas-wf/sex_biased_expression.feather'
    script: 'scripts/sex_biased_summary_table.py'