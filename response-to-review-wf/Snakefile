from larval_gonad.config import read_config

rule all:
    input: 
        "../output/response-to-review-wf/prop_cells_on_commonly_expressed.tsv",
        "../output/response-to-review-wf/commonly_expressed_cluster_proportion.tsv",
        "../output/response-to-review-wf/commonly_expressed_GO_analysis.html",
        "../output/response-to-review-wf/chrom_arm_summary.tsv",
        "../output/response-to-review-wf/germline_centric_subset.pkl",
        expand("../output/response-to-review-wf/msl_heatmap.{ext}", ext=["svg", "png"]),
        "../output/response-to-review-wf/y_expression_table.tsv",

################################################################################
# Commonly Expressed Genes
################################################################################
rule prop_cells_on_commonly_expressed:
    """Proportion of cells expressing commonly expressed genes

    Table: commonly expressed genes x cluster
    Value: proportion cells where UMI > 0
    """
    input: 
        annotation="../references/gene_annotation_dmel_r6-26.feather",
        commonly_expressed="../output/cellselection-wf/commonly_expressed_genes.pkl",
        clusters="../output/seurat3-cluster-wf/combined_n3_clusters.feather",
        raw="../output/cellselection-wf/raw.feather",
        tau="../output/expression-atlas-wf/dmel_tau.feather",
        tsps="../output/expression-atlas-wf/dmel_tsps.feather",
    output: "../output/response-to-review-wf/prop_cells_on_commonly_expressed.tsv"
    script: "scripts/prop_cells_on_commonly_expressed.py"

rule commonly_expressed_cluster_proportion:
    """Commonly expressed cluster proportions.

    Commonly expressed genes are defined by being expressed in >33% of cells.
    I want to split the cells with expression out so we know what proportion
    is from each cluster.

    Table: commonly expressed genes x cluster
    Value: Proportion of cluster for each genes (rows sum to 1)
    """
    input: 
        annotation="../references/gene_annotation_dmel_r6-26.feather",
        commonly_expressed="../output/cellselection-wf/commonly_expressed_genes.pkl",
        clusters="../output/seurat3-cluster-wf/combined_n3_clusters.feather",
        raw="../output/cellselection-wf/raw.feather",
        tau="../output/expression-atlas-wf/dmel_tau.feather",
        tsps="../output/expression-atlas-wf/dmel_tsps.feather",
    output: "../output/response-to-review-wf/commonly_expressed_cluster_proportion.tsv"
    script: "scripts/commonly_expressed_cluster_proportion.py"

rule dump_pickle_for_R:
    """Dump out pickle for easy import into R."""
    input: 
        expressed="../output/cellselection-wf/expressed_genes.pkl",
        commonly_expressed="../output/cellselection-wf/commonly_expressed_genes.pkl",
    output: 
        expressed=temp("../output/response-to-review-wf/expressed_genes.txt"),
        commonly_expressed=temp("../output/response-to-review-wf/commonly_expressed_genes.txt"),
    run:
        import joblib

        with open(output.expressed, "w") as fh:
            fh.write("\n".join(joblib.load(input.expressed)))

        with open(output.commonly_expressed, "w") as fh:
            fh.write("\n".join(joblib.load(input.commonly_expressed)))

rule commonly_expressed_GO:
    """Gene Ontology Analysis for commonly expressed genes."""
    input: 
        rmd="scripts/commonly_expressed_GO_analysis.Rmd",
        expressed=rules.dump_pickle_for_R.output.expressed,
        commonly_expressed=rules.dump_pickle_for_R.output.commonly_expressed,
    output:
        html = "../output/response-to-review-wf/commonly_expressed_GO_analysis.html",
    conda: "../envs/go_analysis.yaml"
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 6
    script: "../scripts/rscript.py"

rule chrom_arm_summary:
    input: 
        annotation="../references/gene_annotation_dmel_r6-26.feather",
        expressed="../output/cellselection-wf/expressed_genes.pkl",
        widely_expressed="../output/cellselection-wf/commonly_expressed_genes.pkl",
    output: "../output/response-to-review-wf/chrom_arm_summary.tsv"
    script: "scripts/chrom_arm_summary.py"

################################################################################
# Germline Centric Expressed Genes
################################################################################
rule germline_centric_subset:
    """Reviewer 1's suggested subset.

    Expressed in >10% of cells in at least 2 germline clusters and 1 somatic
    clusters.
    """
    input:
        raw="../output/cellselection-wf/raw.feather",
        clusters="../output/seurat3-cluster-wf/combined_n3_clusters.feather",
    output: "../output/response-to-review-wf/germline_centric_subset.pkl"
    script: "scripts/germline_centric_subset.py"

################################################################################
# MSL Complex Expression
################################################################################
rule plot_mls_heatmap:
    input:
        annotation="../references/gene_annotation_dmel_r6-26.feather",
        zscore="../output/seurat3-cluster-wf/zscore_by_cluster_rep.feather",
    params:
        msl_genes=read_config("../config/other_lists.yaml")["msl_genes"],
        cluster_order=read_config("../config/common.yaml")["cluster_order"],
    output: "../output/response-to-review-wf/msl_heatmap.{ext,svg|png}"
    script: "scripts/mls_complex_gene_expression.py"

################################################################################
# Y Chromosome Expression
################################################################################
rule y_expression_table:
    input:
        annotation="../references/gene_annotation_dmel_r6-26.feather",
        expressed="../output/cellselection-wf/expressed_genes.pkl",
        widely_expressed="../output/cellselection-wf/commonly_expressed_genes.pkl",
        raw="../output/cellselection-wf/raw.feather",
        clusters="../output/seurat3-cluster-wf/combined_n3_clusters.feather",
    output: "../output/response-to-review-wf/y_expression_table.tsv"
    script: "scripts/y_expression_table.py"