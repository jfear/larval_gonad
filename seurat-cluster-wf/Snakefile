from pathlib import Path
import re

import pandas as pd

from larval_gonad.config import read_config

common_config = read_config('../config/common.yaml')
assembly = common_config['assembly']
tag = common_config['tag']

configfile: 'config/config.yaml'
data_pattern = config['data_pattern']['cellranger_force']\
    .replace('{assembly}', assembly)\
    .replace('{tag}', tag)

sample_table = pd.read_csv('../config/scrnaseq-sampletable.tsv', sep='\t', index_col=0)
SAMPLES = sample_table.index.values

localrules: fbgn2chrom

rule targets:
    input: 
        expand(
            '../output/seurat-cluster-wf/{cutoffs}/{sample}/seurat_individual.html', 
            cutoffs=[
                'gl-200_gh-None_ul-None_uh-None',
                'gl-200_gh-None_ul-None_uh-1e5',
            ],
            sample=SAMPLES
        ),
        # expand(
        #     '../output/seurat-cluster-wf/{cutoffs}/combined/seurat_combined.html', 
        #     cutoffs=[
        #         'gl-200_gh-None_ul-None_uh-None',
        #         'gl-200_gh-None_ul-None_uh-1e5',
        #     ]
        # ),

rule fbgn2chrom:
    output: 
        '../output/fbgn2chrom.tsv'
    script: 
        '../bin/fbgn2chrom.py'

rule seurat_individual_sample:
    input:
        rmd = 'scripts/cluster_individual_sample.Rmd',
        fbgn2chrom = rules.fbgn2chrom.output[0],
        data = data_pattern
    output: 
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/seurat_individual.html', 
    params:
        rep = lambda wildcards: 'rep' + wildcards.sample.replace('testis', ''),
        gene_low = lambda wildcards: re.findall('gl-(.*?)_.*', wildcards.cutoffs)[0],
        gene_high = lambda wildcards: re.findall('.*gh-(.*?)_.*', wildcards.cutoffs)[0],
        umi_low = lambda wildcards: re.findall('.*ul-(.*?)_.*', wildcards.cutoffs)[0],
        umi_high = lambda wildcards: re.findall('.*uh-(.*)', wildcards.cutoffs)[0]
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 8
    script: 'scripts/cluster_individual_sample.Rmd'

rule dummy_seurat_individual_sample:
    input: rules.seurat_individual_sample.output
    output: 
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/seurat.Robj',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/metadata.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/raw.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/normalized_read_counts.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/dispersion.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/var_genes.txt',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/scaled.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/principal_components_cell.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/principal_components_gene.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/principal_components_stdev.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_cell.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_gene.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_gene_full.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_aligned_cell.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/clusters.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/tsne.tsv'
    run:
        for fname in output:
            Path(fname).touch()

def _combine_and_cluster(wildcards):
    return expand(data_pattern, sample=SAMPLES)

rule combine_and_cluster:
    input:
        rmd = 'scripts/combine_and_cluster.Rmd',
        fbgn2chrom = rules.fbgn2chrom.output[0],
        data = _combine_and_cluster
    output: 
        '../output/seurat-cluster-wf/{cutoffs}/combined/seurat_combined.html', 
    params:
        samples = SAMPLES[:-1],
        gene_low = lambda wildcards: re.findall('gl-(.*?)_.*', wildcards.cutoffs)[0],
        gene_high = lambda wildcards: re.findall('.*gh-(.*?)_.*', wildcards.cutoffs)[0],
        umi_low = lambda wildcards: re.findall('.*ul-(.*?)_.*', wildcards.cutoffs)[0],
        umi_high = lambda wildcards: re.findall('.*uh-(.*)', wildcards.cutoffs)[0]
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 8
    script: 'scripts/combine_and_cluster.Rmd'

rule dummy_combined_and_cluster:
    input: rules.combine_and_cluster.output
    output: 
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/seurat.Robj',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/metadata.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/raw.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/normalized_read_counts.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/dispersion.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/var_genes.txt',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/scaled.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/principal_components_cell.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/principal_components_gene.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/principal_components_stdev.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_cell.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_gene.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_gene_full.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/cca_aligned_cell.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/clusters.tsv',
        '../output/seurat-cluster-wf/{cutoffs}/{sample}/tsne.tsv'
    run:
        for fname in output:
            Path(fname).touch()
