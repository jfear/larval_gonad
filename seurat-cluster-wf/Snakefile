from pathlib import Path
import re

import pandas as pd

from larval_gonad.config import read_config

common_config = read_config('../config/common.yaml')
assembly = common_config['assembly']
tag = common_config['tag']

configfile: 'config/config.yaml'

sample_table = pd.read_csv('../config/scrnaseq-sampletable.tsv', sep='\t', index_col=0)
SAMPLES = sample_table.index.values.tolist()

localrules: fbgn2chrom, unzip_cellranger3, table_to_feather, zscore
ruleorder: combine_and_cluster > seurat_individual_sample

rule targets:
    input:
        # Run seurat on individual samples
        expand(
            '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/seurat_individual.html',
            cellranger=config['cellranger'],
            cutoffs=config['cutoffs'],
            sample=SAMPLES
        ),

        # Run seurat after combining replicates
        expand(
            '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/seurat_combined.html',
            cellranger=config['cellranger'],
            cutoffs=config['cutoffs'],
        ),

        # Make feather formatted files from Seurat TSV outputs
        expand(
            '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/{filetype}.feather',
            cellranger=config['cellranger'],
            cutoffs=config['cutoffs'],
            sample=SAMPLES + ['combined',],
            filetype=[
                'metadata', 'raw', 'normalized_read_counts', 'dispersion', 'scaled',
                'principal_components_cell', 'principal_components_gene', 'principal_components_stdev',
                'clusters', 'tsne',
                'biomarkers_res.0.4', 'biomarkers_res.0.6', 'biomarkers_res.1',
            ]
        ),

        # Calculate z-score from normalized data
        expand(
            '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/zscore.feather',
            cellranger=config['cellranger'],
            cutoffs=config['cutoffs'],
            sample=SAMPLES + ['combined',],
        ),

rule fbgn2chrom:
    output: '../output/fbgn2chrom.tsv'
    script: '../bin/fbgn2chrom.py'


rule unzip_cellranger3:
    input:
        barcodes = config['data_pattern']['cellranger3-wf'].replace('matrix.mtx', 'barcodes.tsv') + '.gz',
        features = config['data_pattern']['cellranger3-wf'].replace('matrix.mtx', 'features.tsv') + '.gz',
        matrix = config['data_pattern']['cellranger3-wf'] + '.gz'
    output:
        barcodes = config['data_pattern']['cellranger3-wf'].replace('matrix.mtx', 'barcodes.tsv'),
        features = config['data_pattern']['cellranger3-wf'].replace('matrix.mtx', 'genes.tsv'),
        matrix = config['data_pattern']['cellranger3-wf']
    shell:"""
        gunzip -c {input.barcodes} > {output.barcodes} && \
        gunzip -c {input.features} > {output.features} && \
        gunzip -c {input.matrix} > {output.matrix}
    """


def _seurat_individual_sample(wildcards):
    return expand(
        config['data_pattern'][wildcards.cellranger], assembly=assembly, tag=tag, sample=wildcards.sample
    )


rule seurat_individual_sample:
    input:
        rmd = 'scripts/cluster_individual_sample.Rmd',
        fbgn2chrom = rules.fbgn2chrom.output[0],
        data = _seurat_individual_sample
    output: '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/seurat_individual.html',
    params:
        rep = lambda wildcards: 'rep' + wildcards.sample.replace('testis', ''),
        gene_low = lambda wildcards: re.findall('gl-(.*?)_.*', wildcards.cutoffs)[0],
        gene_high = lambda wildcards: re.findall('.*gh-(.*?)_.*', wildcards.cutoffs)[0],
        umi_low = lambda wildcards: re.findall('.*ul-(.*?)_.*', wildcards.cutoffs)[0],
        umi_high = lambda wildcards: re.findall('.*uh-(.*)', wildcards.cutoffs)[0]
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 8
    script: 'scripts/cluster_individual_sample.Rmd'


rule dummy_seurat_individual_sample:
    input: rules.seurat_individual_sample.output
    output:
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/seurat.Robj',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/metadata.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/raw.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/normalized_read_counts.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/dispersion.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/var_genes.txt',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/scaled.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/principal_components_cell.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/principal_components_gene.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/principal_components_stdev.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/clusters.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/tsne.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/biomarkers_res.0.4.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/biomarkers_res.0.6.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/{sample}/biomarkers_res.1.tsv',
    run:
        for fname in output:
            Path(fname).touch()


def _combine_and_cluster(wildcards):
    return expand(
        config['data_pattern'][wildcards.cellranger], assembly=assembly, tag=tag, sample=SAMPLES[:-1]
    )


rule combine_and_cluster:
    input:
        rmd = 'scripts/combine_and_cluster.Rmd',
        fbgn2chrom = rules.fbgn2chrom.output[0],
        data = _combine_and_cluster
    output: '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/seurat_combined.html',
    params:
        samples = SAMPLES[:-1],
        gene_low = lambda wildcards: re.findall('gl-(.*?)_.*', wildcards.cutoffs)[0],
        gene_high = lambda wildcards: re.findall('.*gh-(.*?)_.*', wildcards.cutoffs)[0],
        umi_low = lambda wildcards: re.findall('.*ul-(.*?)_.*', wildcards.cutoffs)[0],
        umi_high = lambda wildcards: re.findall('.*uh-(.*)', wildcards.cutoffs)[0]
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 16,
        time_hr=lambda wildcards, attempt: attempt * 8
    script: 'scripts/combine_and_cluster.Rmd'


rule dummy_combined_and_cluster:
    input: rules.combine_and_cluster.output
    output:
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/seurat.Robj',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/metadata.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/raw.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/normalized_read_counts.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/dispersion.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/var_genes.txt',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/scaled.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/principal_components_cell.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/principal_components_gene.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/principal_components_stdev.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/clusters.tsv',
        '../output/seurat-cluster-wf/{cellranger}/{cutoffs}/combined/tsne.tsv'
    run:
        for fname in output:
            Path(fname).touch()


rule table_to_feather:
    input: '{prefix}.tsv'
    output: '{prefix}.feather'
    params: lambda wildcards: config['seurat_file_types'][Path(wildcards.prefix).stem]
    run:
        (pd.read_csv(input[0], sep='\t', index_col=0)
        .rename_axis(params[0])
        .reset_index()
        .to_feather(output[0]))


rule zscore:
    input: '{prefix}/normalized_read_counts.feather'
    output: '{prefix}/zscore.tsv'
    script: 'scripts/zscore.py'
