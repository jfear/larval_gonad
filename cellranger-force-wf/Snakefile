import yaml
from pathlib import Path

import pandas as pd

from larval_gonad.config import read_config

configfile: './config/config.yaml'

# Build References
common_config = read_config('../config/common.yaml')
assembly = common_config['assembly']
tag = common_config['tag']
sample_table = pd.read_csv('./config/sampletable.tsv', sep='\t', index_col=0)


rule targets:
    input:
        f'../references/cellranger2/{assembly}{tag}/star/SA',
        expand('{outdir}/{sample}/outs/possorted_genome_bam.bam', outdir=config['outdir'], sample=sample_table.index.values),
        expand('{outdir}/{sample}/outs/possorted_genome_bam.bam_counts', outdir=config['outdir'], sample=sample_table.index.values),

rule cellranger_mkref:
    input:
        gtf = Path(f'../references/{assembly}-all-{tag}.modFix.gtf').absolute().as_posix(),
        fasta = Path(f'../lcdb-references/{assembly}/{tag}/fasta/{assembly}_{tag}.fasta').absolute().as_posix()
    output:
        fasta=f'../references/cellranger2/{assembly}{tag}/fasta/genome.fa',
        gtf=f'../references/cellranger2/{assembly}{tag}/genes/genes.gtf',
        star=f'../references/cellranger2/{assembly}{tag}/star/SA'
    params:
        assembly=assembly,
        tag=tag
    threads: 6
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 8,
        time_hr=lambda wildcards, attempt: attempt * 4
    shell:"""
        cd ../references/cellranger2 && \
        rm -r {params.assembly}{params.tag}/ && \
        $HOME/opt/cellranger-2.1.1/cellranger mkref \
            --genome={params.assembly}{params.tag} \
            --fasta={input.fasta} \
            --genes={input.gtf} \
            --nthreads={threads} \
            --memgb={resources.mem_gb}
    """


# Run Cell Ranger v2.1.1 force
rule cellranger:
    input:
         ref=rules.cellranger_mkref.output.star,
    output:
        '{outdir}/{sample}/outs/possorted_genome_bam.bam'
    params:
        refdir = Path(f'../references/cellranger2/{assembly}{tag}').absolute().as_posix(),
        outdir = config['outdir']
    threads: 16
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 25,
        time_hr=lambda wildcards, attempt: attempt * 24
    run:
        record = sample_table.loc[wildcards.sample, :]
        sample = record['sample']
        fname = Path(record['orig_filename']).absolute().as_posix()
        expected = int(record['expected'])
        cmd = (
            f'cd {params.outdir} && '
            f'rm -rf {wildcards.sample} &&'
            f'$HOME/opt/cellranger-2.1.1/cellranger count '
            f'--id={wildcards.sample} '
            f'--transcriptome={params.refdir} '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
            f'--force-cells={expected}'
        )
        shell(cmd)


rule counts_by_chromosome:
    input: '{prefix}.bam'
    output: '{prefix}.bam_counts'
    resources:
        mem_gb=lambda wildcards, attempt: attempt * 25,
        time_hr=lambda wildcards, attempt: attempt * 4
    script: '../scripts/parse_bam.py'
