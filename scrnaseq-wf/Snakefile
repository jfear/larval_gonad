"""Testis Single Cell Workflow."""
import sys
import os
from textwrap import dedent
import yaml
import tempfile
import pandas as pd
from lcdblib.snakemake import helpers, aligners
from lcdblib.utils import utils
from larval_gonad.normalization import rpkm, cpm, tpm
from larval_gonad.config import config as sconfig
from larval_gonad.scRNAseq import Seurat

sys.path.insert(0, srcdir('../lcdb-wf'))
from lib import common
from lib.patterns_targets import RNASeqConfig


configfile: 'config/config.yaml'
shell.prefix('set -euo pipefail; export TMPDIR={};'.format(common.tempdir_for_biowulf()))
shell.executable('/bin/bash')

c = RNASeqConfig(config, 'config/scrnaseq_patterns.yaml')


# ----------------------------------------------------------------------------
# RULES
# ----------------------------------------------------------------------------
final_targets = utils.flatten((
    utils.flatten(c.targets['cellranger']['bam']),
    utils.flatten(c.targets['cellranger_force']['bam']),
    'scripts/scrnaseq_combine_force.html',
    'scripts/scrnaseq_rep1_force.html',
    'scripts/scrnaseq_rep2_force.html',
    'scripts/scrnaseq_rep3_force.html',
    'scripts/germcell_differential_expression.html',
    '../output/scrnaseq-wf/seurat_norm_by_cluster.parquet',
    '../output/scrnaseq-wf/raw.parquet',
    '../output/scrnaseq-wf/raw_by_cluster.parquet',
    '../output/scrnaseq-wf/cpm.parquet',
    '../output/scrnaseq-wf/rpkm.parquet',
    '../output/scrnaseq-wf/tpm.parquet',
    '../output/scrnaseq-wf/tpm_zscore.parquet',
    '../output/scrnaseq-wf/rpkm_zscore.parquet',

    '../output/scrnaseq-wf/seurat_norm_by_cluster_w_rep.parquet',
    '../output/scrnaseq-wf/raw_by_cluster_w_rep.parquet',
    '../output/scrnaseq-wf/cpm_w_rep.parquet',
    '../output/scrnaseq-wf/rpkm_w_rep.parquet',
    '../output/scrnaseq-wf/tpm_w_rep.parquet',
    '../output/scrnaseq-wf/tpm_zscore_w_rep.parquet',
    '../output/scrnaseq-wf/rpkm_zscore_w_rep.parquet',
))

rule targets:
    """
    Final targets to create
    """
    input: final_targets


rule fix_gtf:
    input:
        gtf = [c.refdict[c.assembly][config['gtf']['tag']]['gtf']]
    output: '../references/dmel-all-r6.16.modFix.gtf'
    shell: """
        awk 'BEGIN{{FS="\t"}}{{
            if (!($9 ~ /FBgn0002781/ && ($7 == "+" || $7 == "."))){{print $0}}
        }}' {input} > {output[0]}
    """


rule cellranger_mkref:
    input:
        gtf = rules.fix_gtf.output,
        fasta = [c.refdict[c.assembly][config['gtf']['tag']]['fasta']]
    output:
        fasta = '../references/dm6.16/fasta/genome.fa',
        gtf = '../references/dm6.16/genes/genes.gtf',
        star = '../references/dm6.16/star/SA'
    threads: 6
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 8,
        time_hr = lambda wildcards, attempt: attempt * 4
    shell:
        'module load cellranger/2.1.1 && '
        'cd ../references/ && '
        'cellranger mkref '
        '--genome=dm6.16 '
        '--fasta={input.fasta} '
        '--genes={input.gtf} '
        '--nthreads={threads} '
        '--memgb={resources.mem_gb} '


rule cellranger:
    input:
        ref = rules.cellranger_mkref.output.star,
    output: '{sample_dir}/{sample,testis1|testis2|testis3}/outs/possorted_genome_bam.bam'
    threads: 16
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 25,
        time_hr = lambda wildcards, attempt: attempt * 24
    run:
        stable = c.sampletable.set_index('samplename')
        record = stable.loc[wildcards.sample, :]
        sample = record['sample']
        fname = record['orig_filename']
        cmd = (
            f'module load cellranger/2.1.1 && '
            f'cd {c.sample_dir} && '
            f'rm -rf {wildcards.sample} &&'
            f'cellranger count '
            f'--id={wildcards.sample} '
            f'--transcriptome=../../../references/dm6.16 '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
        )
        shell(cmd)


rule cellranger_force:
    input:
        ref = rules.cellranger_mkref.output.star,
    output:
        bam='{sample_dir}/{sample,testis1|testis2|testis3}_force/outs/possorted_genome_bam.bam',
        h5='{sample_dir}/{sample,testis1|testis2|testis3}_force/outs/filtered_gene_bc_matrices_h5.h5'
    threads: 16
    resources:
        mem_gb = lambda wildcards, attempt: attempt * 25,
        time_hr = lambda wildcards, attempt: attempt * 24
    run:
        stable = c.sampletable.set_index('samplename')
        record = stable.loc[wildcards.sample, :]
        sample = record['sample']
        fname = record['orig_filename']
        cmd = (
            f'module load cellranger/2.1.1 && '
            f'cd {c.sample_dir} && '
            f'rm -rf {wildcards.sample}_force &&'
            f'cellranger count '
            f'--id={wildcards.sample}_force '
            f'--transcriptome=../../../references/dm6.16 '
            f'--fastqs={fname} '
            f'--sample={sample} '
            f'--localcores={threads} '
            f'--localmem={resources.mem_gb} '
            f'--force-cells=3000 '
        )
        shell(cmd)


rule scrnaseq_r1:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        mtx1='../output/scrnaseq-wf/scrnaseq_samples/testis1_force/outs/filtered_gene_bc_matrices_h5.h5',
        rmd='scripts/scrnaseq_rep1_force.Rmd',
    output:
        html='scripts/scrnaseq_rep1_force.html',
        raw='../output/scrnaseq-wf/scrnaseq_rep1_force/raw.tsv',
        norm='../output/scrnaseq-wf/scrnaseq_rep1_force/normalized_read_counts.tsv',
        cluster='../output/scrnaseq-wf/scrnaseq_rep1_force/clusters.tsv',
        tsne='../output/scrnaseq-wf/scrnaseq_rep1_force/tsne.tsv',
        robj='../output/scrnaseq-wf/scrnaseq_rep1_force/seurat.Robj',
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


rule scrnaseq_r2:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        mtx1='../output/scrnaseq-wf/scrnaseq_samples/testis2_force/outs/filtered_gene_bc_matrices_h5.h5',
        rmd='scripts/scrnaseq_rep2_force.Rmd',
    output:
        html='scripts/scrnaseq_rep2_force.html',
        raw='../output/scrnaseq-wf/scrnaseq_rep2_force/raw.tsv',
        norm='../output/scrnaseq-wf/scrnaseq_rep2_force/normalized_read_counts.tsv',
        cluster='../output/scrnaseq-wf/scrnaseq_rep2_force/clusters.tsv',
        tsne='../output/scrnaseq-wf/scrnaseq_rep2_force/tsne.tsv',
        robj='../output/scrnaseq-wf/scrnaseq_rep2_force/seurat.Robj',
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


rule scrnaseq_r3:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        mtx1='../output/scrnaseq-wf/scrnaseq_samples/testis3_force/outs/filtered_gene_bc_matrices_h5.h5',
        rmd='scripts/scrnaseq_rep3_force.Rmd',
    output:
        html='scripts/scrnaseq_rep3_force.html',
        raw='../output/scrnaseq-wf/scrnaseq_rep3_force/raw.tsv',
        norm='../output/scrnaseq-wf/scrnaseq_rep3_force/normalized_read_counts.tsv',
        cluster='../output/scrnaseq-wf/scrnaseq_rep3_force/clusters.tsv',
        tsne='../output/scrnaseq-wf/scrnaseq_rep3_force/tsne.tsv',
        robj='../output/scrnaseq-wf/scrnaseq_rep3_force/seurat.Robj',
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


rule scrnaseq_combine:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        mtx1=utils.flatten(c.targets['cellranger_force']['filtered_h5']),
        rmd='scripts/scrnaseq_combine_force.Rmd',
    output:
        html='scripts/scrnaseq_combine_force.html',
        raw='../output/scrnaseq-wf/scrnaseq_combine_force/raw.tsv',
        norm='../output/scrnaseq-wf/scrnaseq_combine_force/normalized_read_counts.tsv',
        cluster='../output/scrnaseq-wf/scrnaseq_combine_force/clusters.tsv',
        tsne='../output/scrnaseq-wf/scrnaseq_combine_force/tsne.tsv',
        robj='../output/scrnaseq-wf/scrnaseq_combine_force/seurat.Robj',
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


rule germcell_rmarkdown:
    """
    Run and render the RMarkdown file that performs differential expression
    """
    input:
        robj=rules.scrnaseq_combine.output.robj,
        rmd='scripts/germcell_differential_expression.Rmd',
    output:
        'scripts/germcell_differential_expression.html',
        '../output/scrnaseq-wf/gonia_vs_cytes.tsv',
        '../output/scrnaseq-wf/gonia_vs_cytes_plus_11.tsv',
        '../output/scrnaseq-wf/gonia_vs_early.tsv',
        '../output/scrnaseq-wf/gonia_vs_mid.tsv',
        '../output/scrnaseq-wf/gonia_vs_late.tsv',
        '../output/scrnaseq-wf/gonia_vs_eleven.tsv',
        '../output/scrnaseq-wf/early_vs_mid.tsv',
        '../output/scrnaseq-wf/early_vs_late.tsv',
        '../output/scrnaseq-wf/early_vs_eleven.tsv',
        '../output/scrnaseq-wf/mid_vs_late.tsv',
        '../output/scrnaseq-wf/mid_vs_eleven.tsv',
        '../output/scrnaseq-wf/late_vs_eleven.tsv',
    shell:
        'Rscript -e '
        '''"rmarkdown::render('{input.rmd}', 'knitrBootstrap::bootstrap_document')"'''


rule raw:
    input: '../output/scrnaseq-wf/scrnaseq_combine_force/raw.tsv',
    output: '../output/scrnaseq-wf/raw.parquet'
    run:
        import pandas as pd
        raw = pd.read_csv(input[0], sep='\t', index_col=0)
        raw.index.name = 'FBgn'
        raw.to_parquet(output[0])


rule agg_raw_counts:
    input:
        cnts = '../output/scrnaseq-wf/scrnaseq_combine_force/raw.tsv',
        clusters = '../output/scrnaseq-wf/scrnaseq_combine_force/clusters.tsv',
    output: '../output/scrnaseq-wf/raw_by_cluster.parquet'
    params:
        seurat_dir = '../output/scrnaseq-wf/scrnaseq_combine_force',
        resolution = sconfig['resolution']
    run:
        s = Seurat(params.seurat_dir)
        clusters = s.get_clusters(resolution=params.resolution)
        raw = s.get_raw().T.join(clusters).groupby('cluster').sum().T
        raw.columns = [sconfig['cluster_annot'][x] for x in raw.columns]
        raw.index.name = 'FBgn'
        raw[sconfig['cluster_order']].to_parquet(output[0])


rule agg_raw_counts_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/scrnaseq_combine_force/raw.tsv',
        clusters = '../output/scrnaseq-wf/scrnaseq_combine_force/clusters.tsv',
    output: '../output/scrnaseq-wf/raw_by_cluster_w_rep.parquet'
    params:
        seurat_dir = '../output/scrnaseq-wf/scrnaseq_combine_force',
        resolution = sconfig['resolution']
    run:
        s = Seurat(params.seurat_dir)
        clusters = s.get_clusters(resolution=params.resolution)
        clusters = clusters.map(sconfig['cluster_annot'])
        rep = clusters.index.str.extract(r'(?P<rep>rep\d)')
        rep.index = clusters.index

        raw = s.get_raw().T.join(clusters).join(rep).groupby(['cluster', 'rep']).sum().T
        raw.index.name = 'FBgn'
        raw = raw.loc[:, (sconfig['cluster_order'], slice(None))]
        raw.columns = raw.columns.to_series().apply(lambda x: '{0}-{1}'.format(*x)).values
        raw.to_parquet(output[0])


rule agg_norm_counts:
    input:
        cnts = '../output/scrnaseq-wf/scrnaseq_combine_force/normalized_read_counts.tsv',
        clusters = '../output/scrnaseq-wf/scrnaseq_combine_force/clusters.tsv',
    output: '../output/scrnaseq-wf/seurat_norm_by_cluster.parquet'
    params:
        seurat_dir = '../output/scrnaseq-wf/scrnaseq_combine_force',
        resolution = sconfig['resolution']
    run:
        s = Seurat(params.seurat_dir)
        clusters = s.get_clusters(resolution=params.resolution)
        norm = s.get_normalized_read_counts().T.join(clusters).groupby('cluster').sum().T
        norm.columns = [sconfig['cluster_annot'][x] for x in norm.columns]
        norm.index.name = 'FBgn'
        norm[sconfig['cluster_order']].to_parquet(output[0])


rule agg_norm_counts_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/scrnaseq_combine_force/normalized_read_counts.tsv',
        clusters = '../output/scrnaseq-wf/scrnaseq_combine_force/clusters.tsv',
    output: '../output/scrnaseq-wf/seurat_norm_by_cluster_w_rep.parquet'
    params:
        seurat_dir = '../output/scrnaseq-wf/scrnaseq_combine_force',
        resolution = sconfig['resolution']
    run:
        s = Seurat(params.seurat_dir)
        clusters = s.get_clusters(resolution=params.resolution)
        clusters = clusters.map(sconfig['cluster_annot'])
        rep = clusters.index.str.extract(r'(?P<rep>rep\d)')
        rep.index = clusters.index

        norm = s.get_normalized_read_counts().T.join(clusters).join(rep).groupby(['cluster', 'rep']).sum().T
        norm.index.name = 'FBgn'
        norm = norm.loc[:, (sconfig['cluster_order'], slice(None))]
        norm.columns = norm.columns.to_series().apply(lambda x: '{0}-{1}'.format(*x)).values
        norm.to_parquet(output[0])


rule cpm:
    input:
        cnts = '../output/scrnaseq-wf/raw_by_cluster.parquet',
        lens = '../output/gene_ts_lengths.tsv'
    output: '../output/scrnaseq-wf/cpm.parquet',
    run:
        from larval_gonad.normalization import cpm
        raw = pd.read_parquet(input.cnts)
        res = cpm(raw)
        res.to_parquet(output[0])


rule cpm_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/raw_by_cluster_w_rep.parquet',
        lens = '../output/gene_ts_lengths.tsv'
    output: '../output/scrnaseq-wf/cpm_w_rep.parquet',
    run:
        from larval_gonad.normalization import cpm
        raw = pd.read_parquet(input.cnts)
        res = cpm(raw)
        res.to_parquet(output[0])


rule rpkm:
    input:
        cnts = '../output/scrnaseq-wf/raw_by_cluster.parquet',
        lens = '../output/gene_ts_lengths.tsv'
    output: '../output/scrnaseq-wf/rpkm.parquet',
    run:
        from larval_gonad.normalization import rpkm
        raw = pd.read_parquet(input.cnts)
        lens = pd.read_csv(input.lens, sep='\t').set_index('FBgn').gene_ts_length
        lens = lens[raw.index.tolist()]

        res = rpkm(raw, lens)
        res.to_parquet(output[0])


rule rpkm_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/raw_by_cluster_w_rep.parquet',
        lens = '../output/gene_ts_lengths.tsv'
    output: '../output/scrnaseq-wf/rpkm_w_rep.parquet',
    run:
        from larval_gonad.normalization import rpkm
        raw = pd.read_parquet(input.cnts)
        lens = pd.read_csv(input.lens, sep='\t').set_index('FBgn').gene_ts_length
        lens = lens[raw.index.tolist()]

        res = rpkm(raw, lens)
        res.to_parquet(output[0])


rule tpm:
    input:
        cnts = '../output/scrnaseq-wf/raw_by_cluster.parquet',
        lens = '../output/gene_ts_lengths.tsv'
    output: '../output/scrnaseq-wf/tpm.parquet',
    run:
        from larval_gonad.normalization import tpm
        raw = pd.read_parquet(input.cnts)
        lens = pd.read_csv(input.lens, sep='\t').set_index('FBgn').gene_ts_length
        lens = lens[raw.index.tolist()]

        res = tpm(raw, lens)
        res.to_parquet(output[0])


rule tpm_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/raw_by_cluster_w_rep.parquet',
        lens = '../output/gene_ts_lengths.tsv'
    output: '../output/scrnaseq-wf/tpm_w_rep.parquet',
    run:
        from larval_gonad.normalization import tpm
        raw = pd.read_parquet(input.cnts)
        lens = pd.read_csv(input.lens, sep='\t').set_index('FBgn').gene_ts_length
        lens = lens[raw.index.tolist()]

        res = tpm(raw, lens)
        res.to_parquet(output[0])


rule tpm_zscore:
    input:
        cnts = '../output/scrnaseq-wf/tpm.parquet',
    output: '../output/scrnaseq-wf/tpm_zscore.parquet',
    run:
        from larval_gonad.normalization import zscore
        tpm = pd.read_parquet(input.cnts)
        res = zscore(tpm)
        res.to_parquet(output[0])


rule tpm_zscore_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/tpm_w_rep.parquet',
    output: '../output/scrnaseq-wf/tpm_zscore_w_rep.parquet',
    run:
        from larval_gonad.normalization import zscore
        tpm = pd.read_parquet(input.cnts)
        res = zscore(tpm)
        res.to_parquet(output[0])


rule rpkm_zscore:
    input:
        cnts = '../output/scrnaseq-wf/rpkm.parquet',
    output: '../output/scrnaseq-wf/rpkm_zscore.parquet',
    run:
        from larval_gonad.normalization import zscore
        rpkm = pd.read_parquet(input.cnts)
        res = zscore(rpkm)
        res.to_parquet(output[0])


rule rpkm_zscore_w_rep:
    input:
        cnts = '../output/scrnaseq-wf/rpkm_w_rep.parquet',
    output: '../output/scrnaseq-wf/rpkm_zscore_w_rep.parquet',
    run:
        from larval_gonad.normalization import zscore
        rpkm = pd.read_parquet(input.cnts)
        res = zscore(rpkm)
        res.to_parquet(output[0])
